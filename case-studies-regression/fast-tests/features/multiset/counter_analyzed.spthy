theory counter begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: fst/1, h/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2





/* looping facts with injective instances: Counter/2 */







rule (modulo E) Create:
   [ Fr( ~s ) ] --[ Start( ~s ) ]-> [ Counter( ~s, '1' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Inc:
   [ Counter( ~s, x ), In( x ) ]
  --[ Counter( ~s, x ) ]->
   [ Counter( ~s, ('1'++x) ), Out( senc(x, ~s) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma counters_linear_order [reuse, use_induction]:
  all-traces
  "∀ x y #i #j s.
    ((Counter( s, x ) @ #i) ∧ (Counter( s, y ) @ #j)) ⇒
    (((∃ z. (x++z) = y) ∨ (∃ z. (y++z) = x)) ∨ (y = x))"
/*
guarded formula characterizing all counter-examples:
"∃ x y #i #j s.
  (Counter( s, x ) @ #i) ∧ (Counter( s, y ) @ #j)
 ∧
  (∀ z. ((x++z) = y) ⇒ ⊥) ∧ (∀ z. ((y++z) = x) ⇒ ⊥) ∧ (¬(y = x))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (last(#j))  ∥ (last(#i))  ∥ (∃ z. ((z++x.1) = x.2))  ∥
         (∃ z. ((z++x.2) = x.1))  ∥ (x.2 = x.1) )
    case case_1
    solve( Counter( ~s.2, x.1 ) ▶₀ #i )
      case Create
      solve( Counter( ~s.2, x.2 ) ▶₀ #j )
        case Create
        by contradiction /* cyclic */
      next
        case Inc
        by contradiction /* from formulas */
      qed
    next
      case Inc
      solve( (last(#i))  ∥ (∃ z. ((z++x.3) = ('1'++x.3)))  ∥
             (∃ z. (('1'++z++x.3) = x.3)) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (last(#i))  ∥ (∃ z. (('1'++z++x.3) = x.3))  ∥
               (∃ z. ((z++x.3) = ('1'++x.3))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_3
          solve( Counter( ~s.2, x.2 ) ▶₀ #j )
            case Create
            by contradiction /* from formulas */
          next
            case Inc
            solve( (last(#i))  ∥ (∃ z. ((z++x.4) = ('1'++x.3)))  ∥
                   (∃ z. (('1'++z++x.3) = x.4))  ∥ (('1'++x.3) = x.4) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2_case_1
              by contradiction /* cyclic */
            next
              case case_2_case_2
              by contradiction /* non-injective facts (#vr.1,#i,#j) */
            next
              case case_2_case_3
              by contradiction /* non-injective facts (#vr.1,#i,#j) */
            next
              case case_2_case_4
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Counter( ~s.2, x.1 ) ▶₀ #i )
      case Create
      by contradiction /* non-injective facts (#vr,#j,#i) */
    next
      case Inc
      solve( (last(#j))  ∥ (∃ z. ((z++x.3) = x.2))  ∥
             (∃ z. ((z++x.2) = x.3))  ∥ (x.2 = x.3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* non-injective facts (#vr,#j,#i) */
      next
        case case_3
        by contradiction /* from formulas */
      next
        case case_4
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_3
    by contradiction /* from formulas */
  next
    case case_4
    by contradiction /* from formulas */
  next
    case case_5
    by contradiction /* cyclic */
  qed
qed

lemma counter_start [reuse, use_induction]:
  all-traces
  "∀ #i x s.
    (Counter( s, x ) @ #i) ⇒ (∃ #j. (Start( s ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ #i x s. (Counter( s, x ) @ #i) ∧ ∀ #j. (Start( s ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (last(#i))  ∥
         (∃ #j. (Start( ~s.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( Counter( ~s.1, x.1 ) ▶₀ #i )
      case Create
      by contradiction /* from formulas */
    next
      case Inc
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma counter_increases [reuse, use_induction]:
  all-traces
  "∀ x y #i #j s.
    ((Counter( s, x ) @ #i) ∧ (Counter( s, y ) @ #j)) ⇒
    ((#i < #j) ⇒ (∃ z. (x++z) = y))"
/*
guarded formula characterizing all counter-examples:
"∃ x y #i #j s.
  (Counter( s, x ) @ #i) ∧ (Counter( s, y ) @ #j)
 ∧
  (#i < #j) ∧ (∀ z. ((x++z) = y) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (∃ z. ((z++x.1) = x.2))  ∥ (∃ z. ((z++x.2) = x.1))  ∥
         (x.2 = x.1) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* cyclic */
  qed
qed

lemma lesser_senc_secret [use_induction]:
  all-traces
  "∀ x y #i #j s.
    ((Counter( s, x ) @ #i) ∧ (K( senc(h(y), s) ) @ #j)) ⇒
    ((#i < #j) ∨ (∃ z. (y++z) = x))"
/*
guarded formula characterizing all counter-examples:
"∃ x y #i #j s.
  (Counter( s, x ) @ #i) ∧ (K( senc(h(y), s) ) @ #j)
 ∧
  (¬(#i < #j)) ∧ (∀ z. ((y++z) = x) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (last(#i))  ∥ (∃ z. ((y++z) = x.1)) )
    case case_1
    solve( !KU( senc(h(y), ~s.3) ) @ #vk.1 )
      case Inc
      solve( (∃ z.1. ((z++z.1++h(y)) = h(y)))  ∥
             (∃ z.1. ((z.1++h(y)) = (z++h(y)))) )
        case case_2
        solve( (∃ z.1. ((z.1++h(y)) = (z++h(y))))  ∥
               (∃ z.1. ((z++z.1++h(y)) = h(y))) )
          case case_1
          solve( Counter( ~s.4, (z++h(y)) ) ▶₀ #i )
            case Inc_case_1
            by solve( Counter( ~s.5, h(y.1) ) ▶₀ #vr.1 )
          next
            case Inc_case_2
            solve( (#vr.1 < #j)  ∥ (∃ z.3. ((y.1++z.3) = (z.2++h(y.1)))) )
              case case_1
              solve( (∃ z.3. (('1'++z.2++z.3++h(y.1)) = (z.2++h(y.1))))  ∥
                     (∃ z.3. ((z.2++z.3++h(y.1)) = ('1'++z.2++h(y.1)))) )
                case case_2
                solve( (∃ z.3. ((z.2++z.3++h(y.1)) = h(y.1)))  ∥
                       (∃ z.3. ((z.3++h(y.1)) = (z.2++h(y.1)))) )
                  case case_2
                  solve( (∃ z.3. ((z.2++z.3++h(y.1)) = ('1'++z.2++h(y.1))))  ∥
                         (∃ z.3. (('1'++z.2++z.3++h(y.1)) = (z.2++h(y.1)))) )
                    case case_1
                    solve( (∃ z.3. ((z.3++h(y.1)) = (z.2++h(y.1))))  ∥
                           (∃ z.3. ((z.2++z.3++h(y.1)) = h(y.1))) )
                      case case_1
                      by solve( Counter( ~s.5, h(y.1) ) ▶₀ #vr )
                    qed
                  qed
                qed
              qed
            next
              case case_2_case_1
              by contradiction /* from formulas */
            next
              case case_2_case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_senc
      by solve( !KU( ~s.3 ) @ #vk.3 )
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed













/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/features//multiset/counter.spthy

  output:          examples/features//multiset/counter.spthy.tmp
  processing time: 0.18s
  
  counters_linear_order (all-traces): verified (31 steps)
  counter_start (all-traces): verified (7 steps)
  counter_increases (all-traces): verified (5 steps)
  lesser_senc_secret (all-traces): verified (18 steps)

==============================================================================
*/
