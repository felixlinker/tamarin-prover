theory Keyserver begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true







rule (modulo E) SetupServerKey:
   [ Fr( ~sk ) ]
  -->
   [ !ServerSK( ~sk ), !ServerPK( pk(~sk) ), Out( pk(~sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SetupHonestKey:
   [ Fr( ~sk ) ]
  --[ HonestKey( ~sk ) ]->
   [ Out( pk(~sk) ), ClientKey( $A, ~sk ), ServerDB( $A, pk(~sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SetupDishonestKey:
   [ In( sk ) ] --> [ ServerDB( $A, pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_RenewKey:
   [ ClientKey( $A, ~sk ), Fr( ~skNew ) ]
  --[ HonestKey( ~skNew ) ]->
   [
   Out( <<'renew', $A, pk(~skNew)>, sign(<'renew', $A, pk(~skNew)>, ~sk)> ),
   ClientKey( $A, ~skNew ),
   AwaitConfirmation( sign(<'renew', $A, pk(~skNew)>, ~sk), ~sk )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Client_LeakKey:
   [ AwaitConfirmation( request, sk ), !ServerPK( pkServer ), In( sig ) ]
  --[
  Eq( verify(sig, <'confirm', request>, pkServer), true ), Revoked( sk )
  ]->
   [ Out( sk ) ]

  /*
  rule (modulo AC) Client_LeakKey:
     [ AwaitConfirmation( request, sk ), !ServerPK( pkServer ), In( sig ) ]
    --[ Eq( z, true ), Revoked( sk ) ]->
     [ Out( sk ) ]
    variants (modulo AC)
    1. pkServer
             = pk(x)
       request
             = x.1
       sig   = sign(<'confirm', x.1>, x)
       z     = true
    
    2. pkServer
             = pkServer.2
       request
             = request.2
       sig   = sig.2
       z     = verify(sig.2, <'confirm', request.2>, pkServer.2)
  */

rule (modulo E) Server_RenewKey:
   [
   In( <<'renew', A, pkNew>, requestSig> ), ServerDB( A, pk(sk) ),
   !ServerSK( skServer )
   ]
  --[ Eq( verify(requestSig, <'renew', A, pkNew>, pk(sk)), true ) ]->
   [ ServerDB( A, pkNew ), Out( sign(<'confirm', requestSig>, skServer) ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Server_RenewKey:
     [
     In( <<'renew', A, pkNew>, requestSig> ), ServerDB( A, pk(sk) ),
     !ServerSK( skServer )
     ]
    --[ Eq( z, true ) ]->
     [ ServerDB( A, pkNew ), Out( sign(<'confirm', requestSig>, skServer) ) ]
    variants (modulo AC)
    1. A     = A.3
       pkNew = pkNew.3
       requestSig
             = requestSig.3
       sk    = sk.3
       z     = verify(requestSig.3, <'renew', A.3, pkNew.3>, pk(sk.3))
    
    2. A     = x.3
       pkNew = x.4
       requestSig
             = sign(<'renew', x.3, x.4>, x.5)
       sk    = x.5
       z     = true
    // loop breaker: [1]
  */

restriction Eq_checks_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma Knows_Honest_Key_imp_Revoked:
  all-traces
  "∀ sk #i #d.
    ((HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d)) ⇒ (∃ #r. Revoked( sk ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ sk #i #d.
  (HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d) ∧ ∀ #r. (Revoked( sk ) @ #r) ⇒ ⊥"
*/
simplify
solve( HonestKey( x ) @ #i )
  case Client_RenewKey
  solve( !KU( ~skNew ) @ #vk )
    case Client_LeakKey
    by contradiction /* from formulas */
  qed
next
  case SetupHonestKey
  solve( !KU( ~sk.1 ) @ #vk )
    case Client_LeakKey
    by contradiction /* from formulas */
  qed
qed















/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Server_RenewKey: 
Failed to derive Variable(s): sk
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/related_work/AIF_Moedersheim_CCS10/Keyserver.spthy

  output:          examples/related_work/AIF_Moedersheim_CCS10/Keyserver.spthy.tmp
  processing time: 0.17s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  Knows_Honest_Key_imp_Revoked (all-traces): verified (6 steps)

==============================================================================
*/
