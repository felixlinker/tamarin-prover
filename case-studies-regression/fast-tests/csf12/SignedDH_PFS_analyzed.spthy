theory SignedDH_PFS begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true





section{* The Signed Diffie-Hellman Protocol *}





rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ] --> [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( A, pk ) ] --> [ Out( pk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltk ) ] --[ LtkReveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ltkI ) ]
  -->
   [
   Init_1( $I, $R, ~ekI ),
   Out( <$I, $R, 'g'^~ekI, sign(<'1', $I, $R, 'g'^~ekI>, ltkI)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ekI ), !Pk( $R, pk(ltkR) ),
   In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
   ]
  --[ SessionKey( $I, $R, Y^~ekI ) ]->
   [ ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I, $R, ~ekI ), !Pk( $R, pk(ltkR) ),
     In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
     ]
    --[ SessionKey( $I, $R, z ) ]->
     [ ]
    variants (modulo AC)
    1. ~ekI  = ~x.2
       Y     = x.3^inv(~x.2)
       z     = x.3
    
    2. ~ekI  = ~ekI.3
       Y     = Y.3
       z     = Y.3^~ekI.3
    
    3. ~ekI  = ~ekI.3
       Y     = x.2^x.3
       z     = x.2^(~ekI.3*x.3)
    
    4. ~ekI  = ~x.3
       Y     = x.4^inv((~x.3*x.5))
       z     = x.4^inv(x.5)
    
    5. ~ekI  = ~x.3
       Y     = x.4^(x.5*inv(~x.3))
       z     = x.4^x.5
    
    6. ~ekI  = ~x.4
       Y     = x.5^(x.6*inv((~x.4*x.7)))
       z     = x.5^(x.6*inv(x.7))
    
    7. Y     = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Resp:
   [
   !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
   In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
   ]
  --[ SessionKey( $I, $R, X^~ekR ) ]->
   [ Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> ) ]

  /*
  rule (modulo AC) Resp:
     [
     !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
     In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
     ]
    --[ SessionKey( $I, $R, z ) ]->
     [ Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> ) ]
    variants (modulo AC)
    1. ~ekR  = ~x.2
       X     = x.3^inv(~x.2)
       z     = x.3
    
    2. ~ekR  = ~ekR.3
       X     = X.3
       z     = X.3^~ekR.3
    
    3. ~ekR  = ~ekR.3
       X     = x.2^x.3
       z     = x.2^(~ekR.3*x.3)
    
    4. ~ekR  = ~x.3
       X     = x.4^inv((~x.3*x.5))
       z     = x.4^inv(x.5)
    
    5. ~ekR  = ~x.3
       X     = x.4^(x.5*inv(~x.3))
       z     = x.4^x.5
    
    6. ~ekR  = ~x.4
       X     = x.5^(x.6*inv((~x.4*x.7)))
       z     = x.5^(x.6*inv(x.7))
    
    7. X     = DH_neutral
       z     = DH_neutral
  */

lemma Perfect_Forward_Secrecy:
  all-traces
  "∀ I R sessKey #i #k.
    ((SessionKey( I, R, sessKey ) @ #i) ∧ (K( sessKey ) @ #k)) ⇒
    ((∃ #r. (LtkReveal( I ) @ #r) ∧ (#r < #i)) ∨
     (∃ #r. (LtkReveal( R ) @ #r) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ I R sessKey #i #k.
  (SessionKey( I, R, sessKey ) @ #i) ∧ (K( sessKey ) @ #k)
 ∧
  (∀ #r. (LtkReveal( I ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ #r. (LtkReveal( R ) @ #r) ⇒ ¬(#r < #i))"
*/
simplify
solve( SessionKey( I, R, x ) @ #i )
  case Init_2
  solve( Init_1( $I.1, $R.1, ~ekI ) ▶₀ #i )
    case Init_1
    solve( !Pk( $R.1, pk(ltkR) ) ▶₁ #i )
      case Register_pk
      solve( !KU( sign(<'2', $R.1, $I.1, Y>, ~ltk.1) ) @ #vk.7 )
        case Resp
        solve( !KU( sign(<'1', $I.1, $R.1, X>, ~ltk.2) ) @ #vk.14 )
          case Init_1
          solve( !KU( 'g'^(~ekI.1*~ekR.2) ) @ #vk )
            case Init_1
            by solve( !KU( ~ekR.3 ) @ #vk.15 )
          next
            case Resp
            by solve( !KU( ~ekI.4 ) @ #vk.22 )
          next
            case c_exp
            by solve( !KU( ~ekI.1 ) @ #vk.17 )
          qed
        next
          case c_sign
          solve( !KU( ~ltk.2 ) @ #vk.16 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~ltk.1 ) @ #vk.9 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Resp
  solve( !Pk( $I.1, pk(ltkI) ) ▶₀ #i )
    case Register_pk
    solve( !Ltk( $R.1, ltkR ) ▶₁ #i )
      case Register_pk
      solve( !KU( sign(<'1', $I.1, $R.1, X>, ~ltk) ) @ #vk.7 )
        case Init_1
        solve( !KU( 'g'^(~ekI.1*~ekR.1) ) @ #vk )
          case Init_1
          by solve( !KU( ~ekR.2 ) @ #vk.8 )
        next
          case Resp
          by solve( !KU( ~ekI.2 ) @ #vk.15 )
        next
          case c_exp
          by solve( !KU( ~ekI.1 ) @ #vk.10 )
        qed
      next
        case c_sign
        solve( !KU( ~ltk ) @ #vk.9 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed















/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Init_2: 
Failed to derive Variable(s): ltkR

Rule Resp: 
Failed to derive Variable(s): ltkI
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/csf12/SignedDH_PFS.spthy

  output:          examples/csf12/SignedDH_PFS.spthy.tmp
  processing time: 0.33s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  Perfect_Forward_Secrecy (all-traces): verified (23 steps)

==============================================================================
*/
