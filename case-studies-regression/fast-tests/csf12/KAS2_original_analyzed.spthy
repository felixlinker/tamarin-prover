theory KAS2_original begin

// Function signature and definition of the equational theory E

functions: KDF/1, MAC/2, adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2









section{* KAS2 *}

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~m1 ), !Ltk( $I, ~lkI ), !Pk( $R, pkR ) ]
  --[ Sid( ~m1, $I, $R, <$I, $R, 'Init', aenc(~m1, pkR)> ) ]->
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, aenc(~m1, pkR) ), !Ephk( ~m1, ~m1 ),
   Out( aenc(~m1, pkR) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Resp_1:
   [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
  --[
  Sid( ~m2, $R, $I, <$R, $I, 'Resp', aenc(~m2, pkI), c1> ),
  Match( ~m2, <$I, $R, 'Init', c1> ),
  Match( ~m2, <$I, $R, 'Init', c1, aenc(~m2, pkI)> )
  ]->
   [
   Resp_1( ~m2, $I, $R, ~lkR, adec(c1, ~lkR), ~m2, c1, aenc(~m2, pkI) ),
   !Ephk( ~m2, ~m2 ),
   Out( <aenc(~m2, pkI), 
         MAC(KDF(<adec(c1, ~lkR), ~m2, $I, $R, c1, aenc(~m2, pkI)>),
             <'Resp', $R, $I, aenc(~m2, pkI), c1>)
        >
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
    --[
    Sid( ~m2, $R, $I, <$R, $I, 'Resp', aenc(~m2, pkI), c1> ),
    Match( ~m2, <$I, $R, 'Init', c1> ),
    Match( ~m2, <$I, $R, 'Init', c1, aenc(~m2, pkI)> )
    ]->
     [
     Resp_1( ~m2, $I, $R, ~lkR, z, ~m2, c1, aenc(~m2, pkI) ),
     !Ephk( ~m2, ~m2 ),
     Out( <aenc(~m2, pkI), 
           MAC(KDF(<z, ~m2, $I, $R, c1, aenc(~m2, pkI)>),
               <'Resp', $R, $I, aenc(~m2, pkI), c1>)
          >
     )
     ]
    variants (modulo AC)
    1. ~lkR  = ~x.3
       c1    = aenc(x.5, pk(~x.3))
       z     = x.5
    
    2. ~lkR  = ~lkR.3
       c1    = c1.3
       z     = adec(c1.3, ~lkR.3)
  */

rule (modulo E) Init_2:
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ),
   In( <c2, 
        MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>), <'Resp', $R, $I, c2, c1>)
       >
   )
   ]
  --[
  Sid( ~m1, $I, $R, <$I, $R, 'Init', c1, c2> ),
  Match( ~m1, <$R, $I, 'Resp', c2, c1> ),
  Accept( ~m1, $I, $R, KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>) )
  ]->
   [
   Out( MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>),
            <'Init', $I, $R, c1, c2>)
   ),
   !Sessk( ~m1, KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ),
     In( <c2, MAC(KDF(<~m1, z, $I, $R, c1, c2>), <'Resp', $R, $I, c2, c1>)> )
     ]
    --[
    Sid( ~m1, $I, $R, <$I, $R, 'Init', c1, c2> ),
    Match( ~m1, <$R, $I, 'Resp', c2, c1> ),
    Accept( ~m1, $I, $R, KDF(<~m1, z, $I, $R, c1, c2>) )
    ]->
     [
     Out( MAC(KDF(<~m1, z, $I, $R, c1, c2>), <'Init', $I, $R, c1, c2>) ),
     !Sessk( ~m1, KDF(<~m1, z, $I, $R, c1, c2>) )
     ]
    variants (modulo AC)
    1. ~lkI  = ~x.4
       c2    = aenc(x.7, pk(~x.4))
       z     = x.7
    
    2. ~lkI  = ~lkI.3
       c2    = c2.3
       z     = adec(c2.3, ~lkI.3)
  */

rule (modulo E) Resp_2:
   [
   Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 ),
   In( MAC(KDF(<m1, ~m2, $I, $R, c1, c2>), <'Init', $I, $R, c1, c2>) )
   ]
  --[ Accept( ~m2, $R, $I, KDF(<m1, ~m2, $I, $R, c1, c2>) ) ]->
   [ !Sessk( ~m2, KDF(<m1, ~m2, $I, $R, c1, c2>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~s, ~ek ) ] --[ EphkRev( ~s ) ]-> [ Out( ~ek ) ]

  /* has exactly the trivial AC variant */

lemma KAS_key_secrecy:
  all-traces
  "¬(∃ #i1 #i2 s A B k.
      ((((Accept( s, A, B, k ) @ #i1) ∧ (K( k ) @ #i2)) ∧
        (¬(∃ #i4. SesskRev( s ) @ #i4))) ∧
       (∀ ss #i4 #i5 C D ms.
         ((Sid( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5)) ⇒
         (((((¬(∃ #i6. SesskRev( ss ) @ #i6)) ∧
             (¬(∃ #i6 #i7. (LtkRev( A ) @ #i6) ∧ (EphkRev( s ) @ #i7)))) ∧
            (¬(∃ #i6 #i7. (LtkRev( B ) @ #i6) ∧ (EphkRev( ss ) @ #i7)))) ∧
           (¬(∃ #i6 #i7. (LtkRev( A ) @ #i6) ∧ (LtkRev( B ) @ #i7)))) ∧
          (¬(∃ #i6 #i7. (EphkRev( s ) @ #i6) ∧ (EphkRev( ss ) @ #i7)))))) ∧
      ((¬(∃ ss #i4 #i5 C D ms.
           (Sid( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5))) ⇒
       ((¬(∃ #i6. EphkRev( s ) @ #i6)) ∧
        (¬(∃ #i6. (LtkRev( B ) @ #i6) ∧ (#i6 < #i1))))))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 s A B k.
  (Accept( s, A, B, k ) @ #i1) ∧ (K( k ) @ #i2)
 ∧
  (∀ #i4. (SesskRev( s ) @ #i4) ⇒ ⊥) ∧
  (∀ ss #i4 #i5 C D ms.
    (Sid( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5)
   ⇒
    (∀ #i6. (SesskRev( ss ) @ #i6) ⇒ ⊥) ∧
    (∀ #i6 #i7. (LtkRev( A ) @ #i6) ∧ (EphkRev( s ) @ #i7) ⇒ ⊥) ∧
    (∀ #i6 #i7. (LtkRev( B ) @ #i6) ∧ (EphkRev( ss ) @ #i7) ⇒ ⊥) ∧
    (∀ #i6 #i7. (LtkRev( A ) @ #i6) ∧ (LtkRev( B ) @ #i7) ⇒ ⊥) ∧
    (∀ #i6 #i7. (EphkRev( s ) @ #i6) ∧ (EphkRev( ss ) @ #i7) ⇒ ⊥)) ∧
  (((∃ ss #i4 #i5 C D ms.
      (Sid( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5)) ∨
    ((∀ #i6. (EphkRev( s ) @ #i6) ⇒ ⊥) ∧
     (∀ #i6. (LtkRev( B ) @ #i6) ⇒ ¬(#i6 < #i1)))))"
*/
simplify
solve( (∃ ss #i4 #i5 C D ms.
         (Sid( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5))  ∥
       ((∀ #i6. (EphkRev( s ) @ #i6) ⇒ ⊥) ∧
        (∀ #i6. (LtkRev( B ) @ #i6) ⇒ ¬(#i6 < #i1))) )
  case case_1
  solve( Accept( s, A, B, x ) @ #i1 )
    case Init_2
    solve( Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ) ▶₀ #i1 )
      case Init_1
      solve( Sid( ss, C, D, ms ) @ #i4 )
        case Init_1
        solve( !Ltk( $I.1, ~lkI.1 ) ▶₁ #i4 )
          case Register_pk
          solve( !Pk( $R.1, pkR ) ▶₂ #i4 )
            case Register_pk
            by solve( Match( ~m1, <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1))>
                      ) @ #i5 )
          qed
        qed
      next
        case Init_2
        solve( Init_1( ~m1.1, $I.1, $R.1, ~lkI.1, ~m1.1, c1.1 ) ▶₀ #i4 )
          case Init_1
          by solve( Match( ~m1,
                           <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1)), c2.1>
                    ) @ #i5 )
        qed
      next
        case Resp_1
        solve( !Ltk( $R.1, ~lkR ) ▶₂ #i4 )
          case Register_pk
          solve( !Pk( $I.1, pkI ) ▶₃ #i4 )
            case Register_pk
            solve( Match( ~m1, <$R.1, $I.1, 'Resp', aenc(~m2, pk(~ltkA.1)), c1.1>
                   ) @ #i5 )
              case Init_2
              solve( Init_1( ~m1.1, $I.2, $R.2, ~lkI.1, ~m1.1, c1.2 ) ▶₀ #i5 )
                case Init_1
                solve( splitEqs(0) )
                  case split_case_1
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( KDF(<~m1.2, ~m2.1, $I.2, $R.2, aenc(~m1.2, pk(~lkR.1)), 
                                     aenc(~m2.1, pk(~lkI.2))>)
                           ) @ #vk )
                      case Sessk_reveal_case_1
                      by contradiction /* from formulas */
                    next
                      case Sessk_reveal_case_2
                      by contradiction /* from formulas */
                    next
                      case c_KDF
                      solve( !KU( ~m1.2 ) @ #vk.9 )
                        case Ephk_reveal
                        solve( !KU( ~m2.1 ) @ #vk.11 )
                          case Ephk_reveal
                          by contradiction /* from formulas */
                        next
                          case Resp_1
                          solve( !KU( ~ltkA.4 ) @ #vk.20 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Init_1
                        solve( !KU( ~m2.1 ) @ #vk.11 )
                          case Ephk_reveal
                          solve( !KU( ~lkR.2 ) @ #vk.19 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Resp_1
                          solve( !KU( ~lkR.2 ) @ #vk.19 )
                            case Ltk_reveal
                            solve( !KU( ~ltkA.4 ) @ #vk.21 )
                              case Ltk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( !KU( MAC(KDF(<~m1.2, ~m2.1, $I.2, $R.2, aenc(~m1.2, pk(~ltkA.3)), 
                                         aenc(~m2.1, pk(~lkI.2))>),
                                    <'Resp', $R.2, $I.2, aenc(~m2.1, pk(~lkI.2)), aenc(~m1.2, pk(~ltkA.3))>)
                           ) @ #vk.7 )
                      case c_MAC
                      solve( !KU( KDF(<~m1.2, ~m2.1, $I.2, $R.2, aenc(~m1.2, pk(~ltkA.3)), 
                                       aenc(~m2.1, pk(~lkI.2))>)
                             ) @ #vk.8 )
                        case Sessk_reveal
                        by contradiction /* cyclic */
                      next
                        case c_KDF
                        solve( !KU( ~m1.2 ) @ #vk.19 )
                          case Ephk_reveal
                          solve( !KU( ~m2.1 ) @ #vk.21 )
                            case Ephk_reveal
                            by contradiction /* from formulas */
                          next
                            case Resp_1
                            solve( !KU( ~ltkA.5 ) @ #vk.30 )
                              case Ltk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case Init_1
                          solve( !KU( ~m2.1 ) @ #vk.21 )
                            case Ephk_reveal
                            solve( !KU( ~ltkA.4 ) @ #vk.29 )
                              case Ltk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Resp_1
                            solve( !KU( ~ltkA.4 ) @ #vk.29 )
                              case Ltk_reveal
                              solve( !KU( ~ltkA.5 ) @ #vk.31 )
                                case Ltk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( MAC(KDF(<~m1.2, adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.2), 
                                         $I.2, $R.2, aenc(~m1.2, pk(~lkR.1)), aenc(~m2.1, pk(~ltkA.3))>),
                                    <'Resp', $R.2, $I.2, aenc(~m2.1, pk(~ltkA.3)), aenc(~m1.2, pk(~lkR.1))>)
                           ) @ #vk.7 )
                      case c_MAC
                      solve( !KU( KDF(<~m1.2, adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.2), $I.2, 
                                       $R.2, aenc(~m1.2, pk(~lkR.1)), aenc(~m2.1, pk(~ltkA.3))>)
                             ) @ #vk.8 )
                        case Sessk_reveal
                        by contradiction /* cyclic */
                      next
                        case c_KDF
                        solve( !KU( ~m1.2 ) @ #vk.19 )
                          case Ephk_reveal
                          solve( !KU( adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.3) ) @ #vk.21 )
                            case c_adec
                            solve( !KU( ~lkI.3 ) @ #vk.30 )
                              case Ltk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case Init_1
                          solve( !KU( ~ltkA.4 ) @ #vk.29 )
                            case Ltk_reveal
                            solve( !KU( adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.3) ) @ #vk.21 )
                              case c_adec
                              solve( !KU( ~lkI.3 ) @ #vk.31 )
                                case Ltk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( !KU( MAC(KDF(<~m1.2, adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.2), 
                                         $I.2, $R.2, aenc(~m1.2, pk(~ltkA.4)), aenc(~m2.1, pk(~ltkA.3))>),
                                    <'Resp', $R.2, $I.2, aenc(~m2.1, pk(~ltkA.3)), aenc(~m1.2, pk(~ltkA.4))>)
                           ) @ #vk.7 )
                      case c_MAC
                      solve( !KU( KDF(<~m1.2, adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.2), $I.2, 
                                       $R.2, aenc(~m1.2, pk(~ltkA.4)), aenc(~m2.1, pk(~ltkA.3))>)
                             ) @ #vk.8 )
                        case Sessk_reveal
                        by contradiction /* cyclic */
                      next
                        case c_KDF
                        solve( !KU( ~m1.2 ) @ #vk.19 )
                          case Ephk_reveal
                          solve( !KU( adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.3) ) @ #vk.21 )
                            case c_adec
                            solve( !KU( ~lkI.3 ) @ #vk.30 )
                              case Ltk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case Init_1
                          solve( !KU( ~ltkA.5 ) @ #vk.29 )
                            case Ltk_reveal
                            solve( !KU( adec(aenc(~m2.1, pk(~ltkA.3)), ~lkI.3) ) @ #vk.21 )
                              case c_adec
                              solve( !KU( ~lkI.3 ) @ #vk.31 )
                                case Ltk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Resp_2
    solve( Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 ) ▶₀ #i1 )
      case Resp_1
      solve( Sid( ss, C, D, ms ) @ #i4 )
        case Init_1
        solve( !Ltk( $I.1, ~lkI ) ▶₁ #i4 )
          case Register_pk
          solve( !Pk( $R.1, pkR ) ▶₂ #i4 )
            case Register_pk
            solve( Match( ~m2, <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1))>
                   ) @ #i5 )
              case Resp_1
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( MAC(KDF(<~m1.2, ~m2.1, $I, $R, aenc(~m1.2, pk(~lkR.2)), 
                                     aenc(~m2.1, pk(~ltkA))>),
                                <'Init', $I, $R, aenc(~m1.2, pk(~lkR.2)), aenc(~m2.1, pk(~ltkA))>)
                       ) @ #vk.1 )
                  case Init_2
                  solve( !KU( KDF(<~m1.2, ~m2.1, $I, $R, aenc(~m1.2, pk(~lkR.2)), 
                                   aenc(~m2.1, pk(~lkI.1))>)
                         ) @ #vk )
                    case Sessk_reveal_case_1
                    by contradiction /* from formulas */
                  next
                    case Sessk_reveal_case_2
                    by contradiction /* from formulas */
                  next
                    case c_KDF
                    solve( !KU( ~m1.2 ) @ #vk.8 )
                      case Ephk_reveal
                      solve( !KU( ~m2.1 ) @ #vk.10 )
                        case Ephk_reveal
                        by contradiction /* from formulas */
                      next
                        case Resp_1
                        solve( !KU( ~ltkA.3 ) @ #vk.19 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Init_1
                      solve( !KU( ~m2.1 ) @ #vk.10 )
                        case Ephk_reveal
                        solve( !KU( ~lkR.3 ) @ #vk.18 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Resp_1
                        solve( !KU( ~lkR.3 ) @ #vk.18 )
                          case Ltk_reveal
                          solve( !KU( ~ltkA.3 ) @ #vk.20 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_MAC
                  solve( !KU( KDF(<~m1.2, ~m2.1, $I, $R, aenc(~m1.2, pk(~lkR.2)), 
                                   aenc(~m2.1, pk(~ltkA))>)
                         ) @ #vk.4 )
                    case Sessk_reveal_case_1
                    by contradiction /* from formulas */
                  next
                    case Sessk_reveal_case_2
                    by contradiction /* cyclic */
                  next
                    case c_KDF
                    solve( !KU( ~m1.2 ) @ #vk.15 )
                      case Ephk_reveal
                      solve( !KU( ~m2.1 ) @ #vk.17 )
                        case Ephk_reveal
                        by contradiction /* from formulas */
                      next
                        case Resp_1
                        solve( !KU( ~ltkA.3 ) @ #vk.26 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Init_1
                      solve( !KU( ~m2.1 ) @ #vk.17 )
                        case Ephk_reveal
                        solve( !KU( ~lkR.3 ) @ #vk.25 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Resp_1
                        solve( !KU( ~lkR.3 ) @ #vk.25 )
                          case Ltk_reveal
                          solve( !KU( ~ltkA.3 ) @ #vk.27 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( MAC(KDF(<adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.2), ~m2.1, $I, 
                                     $R, aenc(~m1.2, pk(~ltkA.2)), aenc(~m2.1, pk(~ltkA))>),
                                <'Init', $I, $R, aenc(~m1.2, pk(~ltkA.2)), aenc(~m2.1, pk(~ltkA))>)
                       ) @ #vk.1 )
                  case c_MAC
                  solve( !KU( KDF(<adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.2), ~m2.1, $I, $R, 
                                   aenc(~m1.2, pk(~ltkA.2)), aenc(~m2.1, pk(~ltkA))>)
                         ) @ #vk.4 )
                    case Sessk_reveal
                    by contradiction /* cyclic */
                  next
                    case c_KDF
                    solve( !KU( ~m2.1 ) @ #vk.17 )
                      case Ephk_reveal
                      solve( !KU( adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.3) ) @ #vk.15 )
                        case c_adec
                        solve( !KU( ~lkR.3 ) @ #vk.27 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Resp_1
                      solve( !KU( ~ltkA.3 ) @ #vk.26 )
                        case Ltk_reveal
                        solve( !KU( adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.3) ) @ #vk.15 )
                          case c_adec
                          solve( !KU( ~lkR.3 ) @ #vk.28 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Init_2
        solve( Init_1( ~m1.1, $I.1, $R.1, ~lkI, ~m1.1, c1.1 ) ▶₀ #i4 )
          case Init_1
          solve( Match( ~m2, <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1)), c2.1>
                 ) @ #i5 )
            case Resp_1_case_1
            solve( splitEqs(2) )
              case split_case_1
              solve( !KU( MAC(KDF(<adec(<aenc(~m1.2, pk(~ltkA.2)), c2.3>, ~lkR), 
                                   ~m2.1, $I, $R, <aenc(~m1.2, pk(~ltkA.2)), c2.3>, aenc(~m2.1, pk(~ltkA))
                                  >),
                              <'Init', $I, $R, <aenc(~m1.2, pk(~ltkA.2)), c2.3>, aenc(~m2.1, pk(~ltkA))
                              >)
                     ) @ #vk.1 )
                case c_MAC
                solve( !KU( KDF(<adec(<aenc(~m1.2, pk(~ltkA.2)), c2.3>, ~lkR), ~m2.1, 
                                 $I, $R, <aenc(~m1.2, pk(~ltkA.2)), c2.3>, aenc(~m2.1, pk(~ltkA))>)
                       ) @ #vk.11 )
                  case Sessk_reveal
                  by contradiction /* cyclic */
                next
                  case c_KDF
                  solve( !KU( ~m2.1 ) @ #vk.26 )
                    case Ephk_reveal
                    solve( !KU( adec(<aenc(~m1.2, pk(~ltkA.2)), c2.3>, ~lkR.3) ) @ #vk.24 )
                      case c_adec
                      solve( !KU( ~lkR.3 ) @ #vk.40 )
                        case Ltk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Resp_1
                    solve( !KU( ~ltkA.3 ) @ #vk.37 )
                      case Ltk_reveal
                      solve( !KU( adec(<aenc(~m1.2, pk(~ltkA.2)), c2.3>, ~lkR.3) ) @ #vk.24 )
                        case c_adec
                        solve( !KU( ~lkR.3 ) @ #vk.41 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( MAC(KDF(<
                                   adec(<aenc(~m1.2, pk(~ltkA.2)), aenc(z.2, pk(~lkI.1))>, ~lkR), ~m2.1, 
                                   $I, $R, <aenc(~m1.2, pk(~ltkA.2)), aenc(z.2, pk(~lkI.1))>, 
                                   aenc(~m2.1, pk(~ltkA))>),
                              <'Init', $I, $R, <aenc(~m1.2, pk(~ltkA.2)), aenc(z.2, pk(~lkI.1))>, 
                               aenc(~m2.1, pk(~ltkA))>)
                     ) @ #vk.1 )
                case c_MAC
                solve( !KU( KDF(<
                                 adec(<aenc(~m1.2, pk(~ltkA.2)), aenc(z.2, pk(~lkI.1))>, ~lkR), ~m2.1, 
                                 $I, $R, <aenc(~m1.2, pk(~ltkA.2)), aenc(z.2, pk(~lkI.1))>, 
                                 aenc(~m2.1, pk(~ltkA))>)
                       ) @ #vk.11 )
                  case Sessk_reveal
                  by contradiction /* cyclic */
                next
                  case c_KDF
                  solve( !KU( ~m2.1 ) @ #vk.26 )
                    case Ephk_reveal
                    solve( !KU( adec(<aenc(~m1.2, pk(~ltkA.2)), aenc(z.2, pk(~lkI.1))>,
                                     ~lkR.3)
                           ) @ #vk.24 )
                      case c_adec
                      solve( !KU( ~lkR.3 ) @ #vk.40 )
                        case Ltk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Resp_1
                    solve( !KU( ~ltkA.3 ) @ #vk.37 )
                      case Ltk_reveal
                      solve( !KU( adec(<aenc(~m1.2, pk(~ltkA.2)), aenc(z.2, pk(~lkI.1))>,
                                       ~lkR.3)
                             ) @ #vk.24 )
                        case c_adec
                        solve( !KU( ~lkR.3 ) @ #vk.41 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Resp_1_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( KDF(<~m1.2, ~z.2, $I, $R, aenc(~m1.2, pk(~lkR.2)), 
                                 aenc(~z.2, pk(~lkI.1))>)
                       ) @ #vk )
                  case Sessk_reveal_case_1
                  by contradiction /* from formulas */
                next
                  case Sessk_reveal_case_2
                  by contradiction /* from formulas */
                next
                  case c_KDF
                  solve( !KU( ~m1.2 ) @ #vk.8 )
                    case Ephk_reveal
                    solve( !KU( ~z.2 ) @ #vk.10 )
                      case Ephk_reveal
                      by contradiction /* from formulas */
                    next
                      case Resp_1
                      solve( !KU( ~ltkA.3 ) @ #vk.19 )
                        case Ltk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Init_1
                    solve( !KU( ~z.2 ) @ #vk.10 )
                      case Ephk_reveal
                      solve( !KU( ~lkR.3 ) @ #vk.18 )
                        case Ltk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Resp_1
                      solve( !KU( ~lkR.3 ) @ #vk.18 )
                        case Ltk_reveal
                        solve( !KU( ~ltkA.3 ) @ #vk.20 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( MAC(KDF(<~m1.2, ~m2.2, $I, $R, aenc(~m1.2, pk(~lkR.2)), 
                                     aenc(~m2.2, pk(~ltkA.2))>),
                                <'Init', $I, $R, aenc(~m1.2, pk(~lkR.2)), aenc(~m2.2, pk(~ltkA.2))>)
                       ) @ #vk.1 )
                  case c_MAC
                  solve( !KU( KDF(<~m1.2, ~m2.2, $I, $R, aenc(~m1.2, pk(~lkR.2)), 
                                   aenc(~m2.2, pk(~ltkA.2))>)
                         ) @ #vk.7 )
                    case Sessk_reveal
                    by contradiction /* cyclic */
                  next
                    case c_KDF
                    solve( !KU( ~m1.2 ) @ #vk.18 )
                      case Ephk_reveal
                      solve( !KU( ~m2.2 ) @ #vk.20 )
                        case Ephk_reveal
                        by contradiction /* from formulas */
                      next
                        case Resp_1
                        solve( !KU( ~ltkA.4 ) @ #vk.29 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Init_1
                      solve( !KU( ~m2.2 ) @ #vk.20 )
                        case Ephk_reveal
                        solve( !KU( ~lkR.3 ) @ #vk.28 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Resp_1
                        solve( !KU( ~lkR.3 ) @ #vk.28 )
                          case Ltk_reveal
                          solve( !KU( ~ltkA.4 ) @ #vk.30 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( MAC(KDF(<adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.2), ~z.2, $I, 
                                     $R, aenc(~m1.2, pk(~ltkA.2)), aenc(~z.2, pk(~lkI.1))>),
                                <'Init', $I, $R, aenc(~m1.2, pk(~ltkA.2)), aenc(~z.2, pk(~lkI.1))>)
                       ) @ #vk.1 )
                  case c_MAC
                  solve( !KU( KDF(<adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.2), ~z.2, $I, $R, 
                                   aenc(~m1.2, pk(~ltkA.2)), aenc(~z.2, pk(~lkI.1))>)
                         ) @ #vk.7 )
                    case Sessk_reveal
                    by contradiction /* cyclic */
                  next
                    case c_KDF
                    solve( !KU( ~z.2 ) @ #vk.20 )
                      case Ephk_reveal
                      solve( !KU( adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.3) ) @ #vk.18 )
                        case c_adec
                        solve( !KU( ~lkR.3 ) @ #vk.30 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Resp_1
                      solve( !KU( ~ltkA.3 ) @ #vk.29 )
                        case Ltk_reveal
                        solve( !KU( adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.3) ) @ #vk.18 )
                          case c_adec
                          solve( !KU( ~lkR.3 ) @ #vk.31 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( MAC(KDF(<adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.2), ~m2.2, $I, 
                                     $R, aenc(~m1.2, pk(~ltkA.2)), aenc(~m2.2, pk(~ltkA.3))>),
                                <'Init', $I, $R, aenc(~m1.2, pk(~ltkA.2)), aenc(~m2.2, pk(~ltkA.3))>)
                       ) @ #vk.1 )
                  case c_MAC
                  solve( !KU( KDF(<adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.2), ~m2.2, $I, $R, 
                                   aenc(~m1.2, pk(~ltkA.2)), aenc(~m2.2, pk(~ltkA.3))>)
                         ) @ #vk.7 )
                    case Sessk_reveal
                    by contradiction /* cyclic */
                  next
                    case c_KDF
                    solve( !KU( ~m2.2 ) @ #vk.20 )
                      case Ephk_reveal
                      solve( !KU( adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.3) ) @ #vk.18 )
                        case c_adec
                        solve( !KU( ~lkR.3 ) @ #vk.30 )
                          case Ltk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Resp_1
                      solve( !KU( ~ltkA.4 ) @ #vk.29 )
                        case Ltk_reveal
                        solve( !KU( adec(aenc(~m1.2, pk(~ltkA.2)), ~lkR.3) ) @ #vk.18 )
                          case c_adec
                          solve( !KU( ~lkR.3 ) @ #vk.31 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Resp_1
        solve( !Ltk( $R.1, ~lkR.1 ) ▶₂ #i4 )
          case Register_pk
          solve( !Pk( $I.1, pkI ) ▶₃ #i4 )
            case Register_pk
            solve( Match( ~m2, <$R.1, $I.1, 'Resp', aenc(~m2.1, pk(~ltkA.1)), c1.1>
                   ) @ #i5 )
              case Init_2
              by solve( Init_1( ~m1.1, $I.2, $R.2, ~lkI, ~m1.1, c1.2 ) ▶₀ #i5 )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Accept( s, A, B, x ) @ #i1 )
    case Init_2
    solve( Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ) ▶₀ #i1 )
      case Init_1
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( MAC(KDF(<~m1, adec(c2.1, ~lkI.1), $I, $R, 
                             aenc(~m1, pk(~ltkA)), c2.1>),
                        <'Resp', $R, $I, c2.1, aenc(~m1, pk(~ltkA))>)
               ) @ #vk.3 )
          case c_MAC
          solve( !KU( KDF(<~m1, adec(c2.1, ~lkI.1), $I, $R, aenc(~m1, pk(~ltkA)), 
                           c2.1>)
                 ) @ #vk.4 )
            case Sessk_reveal
            by contradiction /* cyclic */
          next
            case c_KDF
            solve( !KU( ~m1 ) @ #vk.15 )
              case Ephk_reveal
              by contradiction /* from formulas */
            next
              case Init_1
              solve( !KU( ~ltkA.1 ) @ #vk.25 )
                case Ltk_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( MAC(KDF(<~m1, z.1, $I, $R, aenc(~m1, pk(~ltkA)), 
                             aenc(z.1, pk(~lkI.1))>),
                        <'Resp', $R, $I, aenc(z.1, pk(~lkI.1)), aenc(~m1, pk(~ltkA))>)
               ) @ #vk.3 )
          case Resp_1
          solve( !KU( KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), 
                           aenc(~m2, pk(~lkI.1))>)
                 ) @ #vk )
            case Sessk_reveal_case_1
            by contradiction /* from formulas */
          next
            case Sessk_reveal_case_2
            by contradiction /* from formulas */
          next
            case c_KDF
            solve( !KU( ~m1 ) @ #vk.6 )
              case Ephk_reveal
              by contradiction /* from formulas */
            next
              case Init_1
              solve( !KU( ~m2 ) @ #vk.8 )
                case Ephk_reveal
                solve( !KU( ~lkR.1 ) @ #vk.16 )
                  case Ltk_reveal
                  by contradiction /* from formulas */
                qed
              next
                case Resp_1
                solve( !KU( ~lkR.1 ) @ #vk.16 )
                  case Ltk_reveal
                  solve( !KU( ~ltkA.2 ) @ #vk.18 )
                    case Ltk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( KDF(<~m1, z.1, $I, $R, aenc(~m1, pk(~ltkA)), 
                           aenc(z.1, pk(~lkI.1))>)
                 ) @ #vk.4 )
            case Sessk_reveal_case_1
            by contradiction /* cyclic */
          next
            case Sessk_reveal_case_2
            by contradiction /* from formulas */
          next
            case c_KDF
            solve( !KU( ~m1 ) @ #vk.15 )
              case Ephk_reveal
              by contradiction /* from formulas */
            next
              case Init_1
              solve( !KU( ~ltkA.1 ) @ #vk.25 )
                case Ltk_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Resp_2
    solve( Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 ) ▶₀ #i1 )
      case Resp_1
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( MAC(KDF(<adec(c1.1, ~lkR.1), ~m2, $I, $R, c1.1, 
                             aenc(~m2, pk(~ltkA))>),
                        <'Init', $I, $R, c1.1, aenc(~m2, pk(~ltkA))>)
               ) @ #vk.1 )
          case c_MAC
          solve( !KU( KDF(<adec(c1.1, ~lkR.1), ~m2, $I, $R, c1.1, 
                           aenc(~m2, pk(~ltkA))>)
                 ) @ #vk.3 )
            case Sessk_reveal
            by contradiction /* cyclic */
          next
            case c_KDF
            solve( !KU( ~m2 ) @ #vk.16 )
              case Ephk_reveal
              by contradiction /* from formulas */
            next
              case Resp_1
              solve( !KU( ~ltkA.1 ) @ #vk.25 )
                case Ltk_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( MAC(KDF(<m1.1, ~m2, $I, $R, aenc(m1.1, pk(~lkR.1)), 
                             aenc(~m2, pk(~ltkA))>),
                        <'Init', $I, $R, aenc(m1.1, pk(~lkR.1)), aenc(~m2, pk(~ltkA))>)
               ) @ #vk.1 )
          case Init_2
          solve( !KU( KDF(<~m1.2, ~m2, $I, $R, aenc(~m1.2, pk(~lkR.1)), 
                           aenc(~m2, pk(~lkI))>)
                 ) @ #vk )
            case Sessk_reveal_case_1
            by contradiction /* from formulas */
          next
            case Sessk_reveal_case_2
            by contradiction /* from formulas */
          next
            case c_KDF
            solve( !KU( ~m1.2 ) @ #vk.7 )
              case Ephk_reveal
              solve( !KU( ~m2 ) @ #vk.9 )
                case Ephk_reveal
                by contradiction /* from formulas */
              next
                case Resp_1
                solve( !KU( ~ltkA.2 ) @ #vk.18 )
                  case Ltk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Init_1
              solve( !KU( ~m2 ) @ #vk.9 )
                case Ephk_reveal
                by contradiction /* from formulas */
              next
                case Resp_1
                solve( !KU( ~lkR.2 ) @ #vk.17 )
                  case Ltk_reveal
                  solve( !KU( ~ltkA.2 ) @ #vk.19 )
                    case Ltk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( KDF(<m1.1, ~m2, $I, $R, aenc(m1.1, pk(~lkR.1)), 
                           aenc(~m2, pk(~ltkA))>)
                 ) @ #vk.3 )
            case Sessk_reveal_case_1
            by contradiction /* from formulas */
          next
            case Sessk_reveal_case_2
            by contradiction /* cyclic */
          next
            case c_KDF
            solve( !KU( ~m2 ) @ #vk.16 )
              case Ephk_reveal
              by contradiction /* from formulas */
            next
              case Resp_1
              solve( !KU( ~ltkA.1 ) @ #vk.25 )
                case Ltk_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed



















/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/csf12/KAS2_original.spthy

  output:          examples/csf12/KAS2_original.spthy.tmp
  processing time: 1.77s
  
  KAS_key_secrecy (all-traces): verified (254 steps)

==============================================================================
*/
