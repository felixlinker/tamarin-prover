theory KAS1 begin

// Function signature and definition of the equational theory E

functions: KDF/1, MAC/2, adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2









section{* KAS1 *}

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_K1_1:
   [ Fr( ~m1 ), !Ltk( $I, ~lkI ), !Pk( $R, pkR ) ]
  --[ SidI( ~m1, $I, $R, <$I, $R, 'Init', aenc(~m1, pkR)> ) ]->
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, aenc(~m1, pkR) ), !Ephk( ~m1, ~m1 ),
   Out( aenc(~m1, pkR) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Resp_K1_1:
   [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
  --[
  SidR( ~m2, $R, $I, <$R, $I, 'Resp', ~m2, c1> ),
  Match( ~m2, <$I, $R, 'Init', c1> ),
  Match( ~m2, <$I, $R, 'Init', c1, ~m2> )
  ]->
   [
   Out( <~m2, 
         MAC(KDF(<adec(c1, ~lkR), $I, $R, ~m2, c1>), <'KC_1_V', $R, $I, ~m2, c1>)>
   ),
   !Sessk( ~m2, KDF(<adec(c1, ~lkR), $I, $R, ~m2, c1>) )
   ]

  /*
  rule (modulo AC) Resp_K1_1:
     [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
    --[
    SidR( ~m2, $R, $I, <$R, $I, 'Resp', ~m2, c1> ),
    Match( ~m2, <$I, $R, 'Init', c1> ),
    Match( ~m2, <$I, $R, 'Init', c1, ~m2> )
    ]->
     [
     Out( <~m2, MAC(KDF(<z, $I, $R, ~m2, c1>), <'KC_1_V', $R, $I, ~m2, c1>)>
     ),
     !Sessk( ~m2, KDF(<z, $I, $R, ~m2, c1>) )
     ]
    variants (modulo AC)
    1. ~lkR  = ~x.3
       c1    = aenc(x.5, pk(~x.3))
       z     = x.5
    
    2. ~lkR  = ~lkR.3
       c1    = c1.3
       z     = adec(c1.3, ~lkR.3)
  */

rule (modulo E) Init_K1_2:
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ),
   In( <nonceB, 
        MAC(KDF(<~m1, $I, $R, nonceB, c1>), <'KC_1_V', $R, $I, nonceB, c1>)>
   )
   ]
  --[
  SidI( ~m1, $I, $R, <$I, $R, 'Init', c1, nonceB> ),
  Match( ~m1, <$R, $I, 'Resp', nonceB, c1> ),
  Accept( ~m1, $I, $R, KDF(<~m1, $I, $R, nonceB, c1>) )
  ]->
   [ !Sessk( ~m1, KDF(<~m1, $I, $R, nonceB, c1>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~s, ~ek ) ] --[ EphkRev( ~s ) ]-> [ Out( ~ek ) ]

  /* has exactly the trivial AC variant */

lemma KAS1_key_secrecy:
  all-traces
  "¬(∃ #i1 #i2 s A B k.
      (((((Accept( s, A, B, k ) @ #i1) ∧ (K( k ) @ #i2)) ∧
         (¬(∃ #i4. SesskRev( s ) @ #i4))) ∧
        (¬(∃ #i4. EphkRev( s ) @ #i4))) ∧
       (∀ ss #i4 #i5 C D ms.
         ((SidR( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5)) ⇒
         (((¬(∃ #i6. SesskRev( ss ) @ #i6)) ∧ (¬(∃ #i6. LtkRev( B ) @ #i6))) ∧
          (¬(∃ #i6 #i7. (LtkRev( A ) @ #i6) ∧ (LtkRev( B ) @ #i7)))))) ∧
      ((¬(∃ ss #i4 #i5 C D ms.
           (SidR( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5))) ⇒
       (¬(∃ #i6. (LtkRev( B ) @ #i6) ∧ (#i6 < #i1)))))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 s A B k.
  (Accept( s, A, B, k ) @ #i1) ∧ (K( k ) @ #i2)
 ∧
  (∀ #i4. (SesskRev( s ) @ #i4) ⇒ ⊥) ∧
  (∀ #i4. (EphkRev( s ) @ #i4) ⇒ ⊥) ∧
  (∀ ss #i4 #i5 C D ms.
    (SidR( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5)
   ⇒
    (∀ #i6. (SesskRev( ss ) @ #i6) ⇒ ⊥) ∧
    (∀ #i6. (LtkRev( B ) @ #i6) ⇒ ⊥) ∧
    (∀ #i6 #i7. (LtkRev( A ) @ #i6) ∧ (LtkRev( B ) @ #i7) ⇒ ⊥)) ∧
  (((∃ ss #i4 #i5 C D ms.
      (SidR( ss, C, D, ms ) @ #i4) ∧ (Match( s, ms ) @ #i5)) ∨
    (∀ #i6. (LtkRev( B ) @ #i6) ⇒ ¬(#i6 < #i1))))"
*/
simplify
solve( (∃ ss #i4 #i5 C D ms.
         (SidR( ss, C, D, ms ) @ #i4) ∧ (Match( ~m1, ms ) @ #i5))  ∥
       (∀ #i6. (LtkRev( $R ) @ #i6) ⇒ ¬(#i6 < #i1)) )
  case case_1
  solve( Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ) ▶₀ #i1 )
    case Init_K1_1
    solve( !Ltk( $R.1, ~lkR ) ▶₂ #i4 )
      case Register_pk
      solve( !Pk( $I.1, pkI ) ▶₃ #i4 )
        case Register_pk
        solve( Match( ~m1, <$R.1, $I.1, 'Resp', ~m2, c1.1> ) @ #i5 )
          case Init_K1_2
          solve( Init_1( ~m1.1, $I.2, $R.2, ~lkI.1, ~m1.1, c1.2 ) ▶₀ #i5 )
            case Init_K1_1
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( KDF(<~z.1, $I.2, $R.2, ~m2, aenc(~z.1, pk(~lkR.1))>)
                     ) @ #vk.3 )
                case Sessk_reveal_case_1
                by contradiction /* from formulas */
              next
                case Sessk_reveal_case_2
                by contradiction /* from formulas */
              next
                case c_KDF
                solve( !KU( ~z.1 ) @ #vk.9 )
                  case Ephk_reveal
                  by contradiction /* from formulas */
                next
                  case Init_K1_1
                  solve( !KU( ~ltkA.3 ) @ #vk.17 )
                    case Ltk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( MAC(KDF(<~m1.2, $I.2, $R.2, ~m2, aenc(~m1.2, pk(~ltkA.3))>),
                              <'KC_1_V', $R.2, $I.2, ~m2, aenc(~m1.2, pk(~ltkA.3))>)
                     ) @ #vk.7 )
                case c_MAC
                solve( !KU( KDF(<~m1.2, $I.2, $R.2, ~m2, aenc(~m1.2, pk(~ltkA.3))>)
                       ) @ #vk.8 )
                  case Sessk_reveal
                  by contradiction /* cyclic */
                next
                  case c_KDF
                  solve( !KU( ~m1.2 ) @ #vk.19 )
                    case Ephk_reveal
                    by contradiction /* from formulas */
                  next
                    case Init_K1_1
                    solve( !KU( ~ltkA.4 ) @ #vk.27 )
                      case Ltk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ) ▶₀ #i1 )
    case Init_K1_1
    solve( !KU( MAC(KDF(<~m1, $I, $R, nonceB, aenc(~m1, pk(~ltkA))>),
                    <'KC_1_V', $R, $I, nonceB, aenc(~m1, pk(~ltkA))>)
           ) @ #vk.2 )
      case Resp_K1_1
      solve( !KU( KDF(<~m1, $I, $R, ~m2, aenc(~m1, pk(~lkR))>) ) @ #vk.3 )
        case Sessk_reveal_case_1
        by contradiction /* from formulas */
      next
        case Sessk_reveal_case_2
        by contradiction /* from formulas */
      next
        case c_KDF
        solve( !KU( ~m1 ) @ #vk.6 )
          case Ephk_reveal
          by contradiction /* from formulas */
        next
          case Init_K1_1
          solve( !KU( ~ltkA.2 ) @ #vk.14 )
            case Ltk_reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_MAC
      solve( !KU( KDF(<~m1, $I, $R, nonceB, aenc(~m1, pk(~ltkA))>) ) @ #vk.4 )
        case Sessk_reveal_case_1
        by contradiction /* from formulas */
      next
        case Sessk_reveal_case_2
        by contradiction /* cyclic */
      next
        case c_KDF
        solve( !KU( ~m1 ) @ #vk.15 )
          case Ephk_reveal
          by contradiction /* from formulas */
        next
          case Init_K1_1
          solve( !KU( ~ltkA.1 ) @ #vk.23 )
            case Ltk_reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed



















/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/csf12/KAS1.spthy

  output:          examples/csf12/KAS1.spthy.tmp
  processing time: 0.36s
  
  KAS1_key_secrecy (all-traces): verified (38 steps)

==============================================================================
*/
