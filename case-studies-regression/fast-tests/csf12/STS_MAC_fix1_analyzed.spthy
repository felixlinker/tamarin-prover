theory STS_MAC_fix1 begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: KDF/1, fst/1, mac/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true









section{* The Station-To-Station Protocol (MAC version, fix UKS attack with proof-of-possession of exponent) *}

rule (modulo E) Register_pk_normal:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Register_pk_evil:
   [ In( ltk ) ]
  --[ Corrupt( $E ) ]->
   [ !Ltk( $E, ltk ), !Pk( $E, pk(ltk) ), Out( pk(ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~ltkI ) ]
  -->
   [ Init_1( $I, $R, ~ltkI, ~ekI ), Out( <$I, $R, 'g'^~ekI> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
   In( <$R, $I, Y, sign(<Y, 'g'^~ekI>, ~ltkR), 
        mac(Y^~ekI, sign(<Y, 'g'^~ekI>, ~ltkR))>
   )
   ]
  --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(Y^~ekI) ) ]->
   [
   Out( <$I, $R, sign(<'g'^~ekI, Y>, ~ltkI), 
         mac(Y^~ekI, sign(<'g'^~ekI, Y>, ~ltkI))>
   ),
   !SessionKey( ~ekI, $I, $R, KDF(Y^~ekI) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
     In( <$R, $I, Y, sign(<Y, 'g'^~ekI>, ~ltkR), 
          mac(z, sign(<Y, 'g'^~ekI>, ~ltkR))>
     )
     ]
    --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(z) ) ]->
     [
     Out( <$I, $R, sign(<'g'^~ekI, Y>, ~ltkI), 
           mac(z, sign(<'g'^~ekI, Y>, ~ltkI))>
     ),
     !SessionKey( ~ekI, $I, $R, KDF(z) )
     ]
    variants (modulo AC)
    1. ~ekI  = ~ekI.3
       Y     = Y.3
       z     = Y.3^~ekI.3
    
    2. ~ekI  = ~ekI.3
       Y     = x.5^x.6
       z     = x.5^(~ekI.3*x.6)
    
    3. ~ekI  = ~x.7
       Y     = x.10^inv(~x.7)
       z     = x.10
    
    4. ~ekI  = ~x.8
       Y     = x.11^inv((~x.8*x.12))
       z     = x.11^inv(x.12)
    
    5. ~ekI  = ~x.8
       Y     = x.11^(x.12*inv(~x.8))
       z     = x.11^x.12
    
    6. ~ekI  = ~x.9
       Y     = x.12^(x.13*inv((~x.9*x.14)))
       z     = x.12^(x.13*inv(x.14))
    
    7. Y     = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Resp_1:
   [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
  -->
   [
   Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   Out( <$R, $I, 'g'^~ekR, sign(<'g'^~ekR, X>, ~ltkR), 
         mac(X^~ekR, sign(<'g'^~ekR, X>, ~ltkR))>
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
    -->
     [
     Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     Out( <$R, $I, 'g'^~ekR, sign(<'g'^~ekR, X>, ~ltkR), 
           mac(z, sign(<'g'^~ekR, X>, ~ltkR))>
     )
     ]
    variants (modulo AC)
    1. ~ekR  = ~ekR.3
       X     = X.3
       z     = X.3^~ekR.3
    
    2. ~ekR  = ~ekR.3
       X     = x.5^x.6
       z     = x.5^(~ekR.3*x.6)
    
    3. ~ekR  = ~x.6
       X     = x.8^inv(~x.6)
       z     = x.8
    
    4. ~ekR  = ~x.7
       X     = x.9^inv((~x.7*x.10))
       z     = x.9^inv(x.10)
    
    5. ~ekR  = ~x.7
       X     = x.9^(x.10*inv(~x.7))
       z     = x.9^x.10
    
    6. ~ekR  = ~x.8
       X     = x.10^(x.11*inv((~x.8*x.12)))
       z     = x.10^(x.11*inv(x.12))
    
    7. X     = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Resp_2:
   [
   !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   In( <$I, $R, sign(<X, 'g'^~ekR>, ~ltkI), 
        mac(X^~ekR, sign(<X, 'g'^~ekR>, ~ltkI))>
   )
   ]
  --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(X^~ekR) ) ]->
   [ !SessionKey( ~ekR, $I, $R, KDF(X^~ekR) ) ]

  /*
  rule (modulo AC) Resp_2:
     [
     !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     In( <$I, $R, sign(<X, 'g'^~ekR>, ~ltkI), 
          mac(z, sign(<X, 'g'^~ekR>, ~ltkI))>
     )
     ]
    --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(z) ) ]->
     [ !SessionKey( ~ekR, $I, $R, KDF(z) ) ]
    variants (modulo AC)
    1. ~ekR  = ~ekR.3
       X     = X.3
       z     = X.3^~ekR.3
    
    2. ~ekR  = ~ekR.3
       X     = x.5^x.6
       z     = x.5^(~ekR.3*x.6)
    
    3. ~ekR  = ~x.7
       X     = x.10^inv(~x.7)
       z     = x.10
    
    4. ~ekR  = ~x.8
       X     = x.11^inv((~x.8*x.12))
       z     = x.11^inv(x.12)
    
    5. ~ekR  = ~x.8
       X     = x.11^(x.12*inv(~x.8))
       z     = x.11^x.12
    
    6. ~ekR  = ~x.9
       X     = x.12^(x.13*inv((~x.9*x.14)))
       z     = x.12^(x.13*inv(x.14))
    
    7. X     = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Sessionkey_Reveal:
   [ !SessionKey( ~tid, $I, $R, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma KI_Perfect_Forward_Secrecy_I:
  all-traces
  "¬(∃ ttest I R sessKey #i1 #k hki hkr.
      (((((AcceptedI( ttest, I, R, hki, hkr, sessKey ) @ #i1) ∧
          (¬(∃ #r. Corrupt( I ) @ #r))) ∧
         (¬(∃ #r. Corrupt( R ) @ #r))) ∧
        (K( sessKey ) @ #k)) ∧
       (¬(∃ #i3. SesskRev( ttest ) @ #i3))) ∧
      (¬(∃ #i3 #i4 tpartner kpartner.
          (SesskRev( tpartner ) @ #i3) ∧
          (AcceptedR( tpartner, I, R, hki, hkr, kpartner ) @ #i4))))"
/*
guarded formula characterizing all counter-examples:
"∃ ttest I R sessKey #i1 #k hki hkr.
  (AcceptedI( ttest, I, R, hki, hkr, sessKey ) @ #i1) ∧ (K( sessKey ) @ #k)
 ∧
  (∀ #r. (Corrupt( I ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Corrupt( R ) @ #r) ⇒ ⊥) ∧
  (∀ #i3. (SesskRev( ttest ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3 #i4 tpartner kpartner.
    (SesskRev( tpartner ) @ #i3) ∧
    (AcceptedR( tpartner, I, R, hki, hkr, kpartner ) @ #i4)
   ⇒
    ⊥)"
*/
simplify
solve( Init_1( $I.1, $R.1, ~ltkI, ~ekI ) ▶₀ #i1 )
  case Init_1_case_1
  solve( !Pk( $R.1, pk(~ltkR) ) ▶₁ #i1 )
    case Register_pk_evil
    by contradiction /* from formulas */
  next
    case Register_pk_normal
    solve( !KU( sign(<Y, 'g'^~ekI>, ~ltkR) ) @ #vk.7 )
      case Init_2_case_1
      solve( !KU( sign(<'g'^~ekI.3, 'g'^~ekI.4>, ~ltkR.1) ) @ #vk.17 )
        case Init_2
        by contradiction /* cyclic */
      next
        case c_sign
        by solve( !KU( ~ltkR.1 ) @ #vk.20 )
      qed
    next
      case Init_2_case_2
      solve( !KU( sign(<'g'^~ekI.3, 'g'^~ekI.4>, ~ltkR.1) ) @ #vk.18 )
        case c_sign
        solve( !KU( KDF('g'^(~ekI.3*~ekI.4)) ) @ #vk.9 )
          case Sessionkey_Reveal_case_1
          solve( splitEqs(1) )
            case split_case_1
            solve( !KU( sign(<'g'^(~ekI.5*~ekI.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.31 )
              case c_sign
              by solve( !KU( ~ltkR.2 ) @ #vk.34 )
            qed
          next
            case split_case_2
            by contradiction /* from formulas */
          qed
        next
          case Sessionkey_Reveal_case_2
          solve( splitEqs(1) )
            case split
            solve( !KU( sign(<'g'^(~ekI.5*~ekI.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.32 )
              case c_sign
              by solve( !KU( ~ltkR.2 ) @ #vk.35 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_3
          solve( splitEqs(1) )
            case split_case_1
            solve( !KU( sign(<'g'^(~ekI.5*~ekI.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.32 )
              case c_sign
              solve( !KU( 'g'^(~ekI.5*~ekI.6*inv(~tid.1)) ) @ #vk.36 )
                case Init_1_case_1
                by solve( !KU( ~ekI.8 ) @ #vk.39 )
              next
                case Init_1_case_2
                by solve( !KU( ~ekI.8 ) @ #vk.39 )
              next
                case c_exp
                by solve( !KU( ~ekI.5 ) @ #vk.40 )
              qed
            qed
          next
            case split_case_2
            solve( !KU( mac('g'^(~tid.1*~x.2), sign(<'g'^~x.2, 'g'^~tid.1>, ~ltkR.2))
                   ) @ #vk.33 )
              case c_mac
              solve( !KU( 'g'^(~tid.1*~x.2) ) @ #vk.34 )
                case Init_1_case_1
                by solve( !KU( ~tid.2 ) @ #vk.36 )
              next
                case Init_1_case_2
                by solve( !KU( ~x.3 ) @ #vk.36 )
              next
                case c_exp
                by solve( !KU( ~tid.1 ) @ #vk.38 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_4
          solve( splitEqs(1) )
            case split
            solve( !KU( sign(<'g'^(~ekI.5*~ekI.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.33 )
              case c_sign
              solve( !KU( 'g'^(~ekI.5*~ekI.6*inv(~tid.1)) ) @ #vk.37 )
                case Init_1_case_1
                by solve( !KU( ~ekI.8 ) @ #vk.40 )
              next
                case Init_1_case_2
                by solve( !KU( ~ekI.8 ) @ #vk.40 )
              next
                case c_exp
                by solve( !KU( ~ekI.5 ) @ #vk.41 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_5
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.7*~ekI.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.27 )
              case c_sign
              by solve( !KU( ~ltkI.1 ) @ #vk.35 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_6
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.7*~ekI.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.28 )
              case c_sign
              by solve( !KU( ~ltkI.1 ) @ #vk.36 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_7
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.7*~ekI.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.28 )
              case c_sign
              solve( !KU( 'g'^(~ekI.7*~ekI.8*inv(~tid.1)) ) @ #vk.37 )
                case Init_1_case_1
                by solve( !KU( ~ekI.10 ) @ #vk.40 )
              next
                case Init_1_case_2
                by solve( !KU( ~ekI.10 ) @ #vk.40 )
              next
                case c_exp
                by solve( !KU( ~ekI.7 ) @ #vk.41 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_8
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.7*~ekI.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.29 )
              case c_sign
              solve( !KU( 'g'^(~ekI.7*~ekI.8*inv(~tid.1)) ) @ #vk.38 )
                case Init_1_case_1
                by solve( !KU( ~ekI.10 ) @ #vk.41 )
              next
                case Init_1_case_2
                by solve( !KU( ~ekI.10 ) @ #vk.41 )
              next
                case c_exp
                by solve( !KU( ~ekI.7 ) @ #vk.42 )
              qed
            qed
          qed
        next
          case c_KDF
          solve( !KU( 'g'^(~ekI.3*~ekI.4) ) @ #vk.24 )
            case Init_1_case_1
            by solve( !KU( ~ekI.6 ) @ #vk.25 )
          next
            case Init_1_case_2
            by solve( !KU( ~ekI.6 ) @ #vk.25 )
          next
            case c_exp
            by solve( !KU( ~ekI.3 ) @ #vk.27 )
          qed
        qed
      qed
    next
      case Resp_1
      solve( !KU( KDF('g'^(~ekR.1*~ekI.2)) ) @ #vk.9 )
        case Sessionkey_Reveal_case_1
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( sign(<'g'^(~ekR.2*~ekI.3*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.22 )
            case c_sign
            by solve( !KU( ~ltkR.1 ) @ #vk.25 )
          qed
        next
          case split_case_2
          by contradiction /* from formulas */
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( splitEqs(1) )
          case split
          solve( !KU( sign(<'g'^(~ekR.2*~ekI.3*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.23 )
            case c_sign
            by solve( !KU( ~ltkR.1 ) @ #vk.26 )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( splitEqs(1) )
          case split
          solve( !KU( sign(<'g'^(~ekR.2*~ekI.3*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.23 )
            case c_sign
            solve( !KU( 'g'^(~ekR.2*~ekI.3*inv(~tid.1)) ) @ #vk.27 )
              case Init_1
              by solve( !KU( ~ekR.3 ) @ #vk.30 )
            next
              case Resp_1
              by solve( !KU( ~ekI.4 ) @ #vk.35 )
            next
              case c_exp
              by solve( !KU( ~ekR.2 ) @ #vk.31 )
            qed
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( splitEqs(1) )
          case split
          solve( !KU( sign(<'g'^(~ekR.2*~ekI.3*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( 'g'^(~ekR.2*~ekI.3*inv(~tid.1)) ) @ #vk.28 )
              case Init_1
              by solve( !KU( ~ekR.3 ) @ #vk.31 )
            next
              case Resp_1
              by solve( !KU( ~ekI.4 ) @ #vk.36 )
            next
              case c_exp
              by solve( !KU( ~ekR.2 ) @ #vk.32 )
            qed
          qed
        qed
      next
        case Sessionkey_Reveal_case_5
        solve( splitEqs(2) )
          case split_case_1
          solve( !KU( sign(<'g'^(~ekR.3*~ekI.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.18 )
            case c_sign
            by solve( !KU( ~ltkI.1 ) @ #vk.26 )
          qed
        next
          case split_case_2
          solve( !KU( sign(<'g'^~x.5, 'g'^~tid.2>, ~ltkI.1) ) @ #vk.18 )
            case Init_2
            by contradiction /* from formulas */
          next
            case c_sign
            by solve( !KU( ~ltkI.1 ) @ #vk.26 )
          qed
        qed
      next
        case Sessionkey_Reveal_case_6
        solve( splitEqs(2) )
          case split
          solve( !KU( sign(<'g'^(~ekR.3*~ekI.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.19 )
            case c_sign
            by solve( !KU( ~ltkI.1 ) @ #vk.27 )
          qed
        qed
      next
        case Sessionkey_Reveal_case_7
        solve( splitEqs(2) )
          case split_case_1
          solve( !KU( sign(<'g'^(~ekR.3*~ekI.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.19 )
            case c_sign
            solve( !KU( 'g'^(~ekR.3*~ekI.4*inv(~tid.1)) ) @ #vk.28 )
              case Init_1
              by solve( !KU( ~ekR.4 ) @ #vk.31 )
            next
              case Resp_1
              by solve( !KU( ~ekI.5 ) @ #vk.36 )
            next
              case c_exp
              by solve( !KU( ~ekR.3 ) @ #vk.32 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( sign(<'g'^~x.5, 'g'^~tid.2>, ~ltkI.1) ) @ #vk.19 )
            case c_sign
            solve( !KU( mac('g'^(~tid.2*~x.5), sign(<'g'^~x.5, 'g'^~tid.2>, ~ltkI.1))
                   ) @ #vk.20 )
              case c_mac
              solve( !KU( 'g'^(~tid.2*~x.5) ) @ #vk.30 )
                case Init_1
                by solve( !KU( ~tid.3 ) @ #vk.32 )
              next
                case Resp_1
                by solve( !KU( ~x.6 ) @ #vk.37 )
              next
                case c_exp
                by solve( !KU( ~tid.2 ) @ #vk.34 )
              qed
            qed
          qed
        qed
      next
        case Sessionkey_Reveal_case_8
        solve( splitEqs(2) )
          case split
          solve( !KU( sign(<'g'^(~ekR.3*~ekI.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.20 )
            case c_sign
            solve( !KU( 'g'^(~ekR.3*~ekI.4*inv(~tid.1)) ) @ #vk.29 )
              case Init_1
              by solve( !KU( ~ekR.4 ) @ #vk.32 )
            next
              case Resp_1
              by solve( !KU( ~ekI.5 ) @ #vk.37 )
            next
              case c_exp
              by solve( !KU( ~ekR.3 ) @ #vk.33 )
            qed
          qed
        qed
      next
        case c_KDF
        solve( !KU( 'g'^(~ekR.1*~ekI.2) ) @ #vk.15 )
          case Init_1
          by solve( !KU( ~ekR.2 ) @ #vk.16 )
        next
          case Resp_1
          by solve( !KU( ~ekI.3 ) @ #vk.21 )
        next
          case c_exp
          by solve( !KU( ~ekR.1 ) @ #vk.18 )
        qed
      qed
    next
      case c_sign
      by solve( !KU( ~ltkR ) @ #vk.11 )
    qed
  qed
next
  case Init_1_case_2
  by contradiction /* from formulas */
qed

lemma KI_Perfect_Forward_Secrecy_R:
  all-traces
  "¬(∃ ttest I R sessKey #i1 #k hki hkr.
      (((((AcceptedR( ttest, I, R, hki, hkr, sessKey ) @ #i1) ∧
          (¬(∃ #r. Corrupt( I ) @ #r))) ∧
         (¬(∃ #r. Corrupt( R ) @ #r))) ∧
        (K( sessKey ) @ #k)) ∧
       (¬(∃ #i2. SesskRev( ttest ) @ #i2))) ∧
      (¬(∃ #i2 #i3 tpartner kpartner.
          (SesskRev( tpartner ) @ #i2) ∧
          (AcceptedI( tpartner, I, R, hki, hkr, kpartner ) @ #i3))))"
/*
guarded formula characterizing all counter-examples:
"∃ ttest I R sessKey #i1 #k hki hkr.
  (AcceptedR( ttest, I, R, hki, hkr, sessKey ) @ #i1) ∧ (K( sessKey ) @ #k)
 ∧
  (∀ #r. (Corrupt( I ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Corrupt( R ) @ #r) ⇒ ⊥) ∧
  (∀ #i2. (SesskRev( ttest ) @ #i2) ⇒ ⊥) ∧
  (∀ #i2 #i3 tpartner kpartner.
    (SesskRev( tpartner ) @ #i2) ∧
    (AcceptedI( tpartner, I, R, hki, hkr, kpartner ) @ #i3)
   ⇒
    ⊥)"
*/
simplify
solve( !Pk( $I.1, pk(~ltkI) ) ▶₀ #i1 )
  case Register_pk_evil
  by contradiction /* from formulas */
next
  case Register_pk_normal
  solve( Resp_1( $I.1, $R.1, ~ltkR, ~ekR, X ) ▶₁ #i1 )
    case Resp_1_case_1
    solve( !KU( sign(<X, 'g'^~ekR>, ~ltkI) ) @ #vk.5 )
      case Init_2_case_1
      solve( !KU( sign(<'g'^~ekR.3, 'g'^~ekI.2>, ~ltkR.1) ) @ #vk.20 )
        case Resp_1
        solve( !KU( KDF('g'^(~ekI.3*~ekR.4)) ) @ #vk.7 )
          case Sessionkey_Reveal_case_1
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.34 )
              case c_sign
              by solve( !KU( ~ltkR.2 ) @ #vk.37 )
            qed
          next
            case split_case_2
            by contradiction /* from formulas */
          qed
        next
          case Sessionkey_Reveal_case_2
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.35 )
              case c_sign
              by solve( !KU( ~ltkR.2 ) @ #vk.38 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_3
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.35 )
              case c_sign
              solve( !KU( 'g'^(~ekI.4*~ekR.5*inv(~tid.1)) ) @ #vk.39 )
                case Init_1
                by solve( !KU( ~ekR.6 ) @ #vk.42 )
              next
                case Resp_1
                by solve( !KU( ~ekI.5 ) @ #vk.47 )
              next
                case c_exp
                by solve( !KU( ~ekI.4 ) @ #vk.43 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_4
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.36 )
              case c_sign
              solve( !KU( 'g'^(~ekI.4*~ekR.5*inv(~tid.1)) ) @ #vk.40 )
                case Init_1
                by solve( !KU( ~ekR.6 ) @ #vk.43 )
              next
                case Resp_1
                by solve( !KU( ~ekI.5 ) @ #vk.48 )
              next
                case c_exp
                by solve( !KU( ~ekI.4 ) @ #vk.44 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_5
          solve( splitEqs(3) )
            case split_case_1
            solve( !KU( sign(<'g'^(~ekI.5*~ekR.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.30 )
              case c_sign
              by solve( !KU( ~ltkI.1 ) @ #vk.38 )
            qed
          next
            case split_case_2
            by contradiction /* from formulas */
          qed
        next
          case Sessionkey_Reveal_case_6
          solve( splitEqs(3) )
            case split
            solve( !KU( sign(<'g'^(~ekI.5*~ekR.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.31 )
              case c_sign
              by solve( !KU( ~ltkI.1 ) @ #vk.39 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_7
          solve( splitEqs(3) )
            case split
            solve( !KU( sign(<'g'^(~ekI.5*~ekR.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.31 )
              case c_sign
              solve( !KU( 'g'^(~ekI.5*~ekR.6*inv(~tid.1)) ) @ #vk.40 )
                case Init_1
                by solve( !KU( ~ekR.7 ) @ #vk.43 )
              next
                case Resp_1
                by solve( !KU( ~ekI.6 ) @ #vk.48 )
              next
                case c_exp
                by solve( !KU( ~ekI.5 ) @ #vk.44 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_8
          solve( splitEqs(3) )
            case split
            solve( !KU( sign(<'g'^(~ekI.5*~ekR.6*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.32 )
              case c_sign
              solve( !KU( 'g'^(~ekI.5*~ekR.6*inv(~tid.1)) ) @ #vk.41 )
                case Init_1
                by solve( !KU( ~ekR.7 ) @ #vk.44 )
              next
                case Resp_1
                by solve( !KU( ~ekI.6 ) @ #vk.49 )
              next
                case c_exp
                by solve( !KU( ~ekI.5 ) @ #vk.45 )
              qed
            qed
          qed
        next
          case c_KDF
          solve( !KU( 'g'^(~ekI.3*~ekR.4) ) @ #vk.27 )
            case Init_1
            by solve( !KU( ~ekR.5 ) @ #vk.28 )
          next
            case Resp_1
            by solve( !KU( ~ekI.4 ) @ #vk.33 )
          next
            case c_exp
            by solve( !KU( ~ekI.3 ) @ #vk.30 )
          qed
        qed
      next
        case c_sign
        by solve( !KU( ~ltkR.1 ) @ #vk.23 )
      qed
    next
      case Init_2_case_2
      solve( !KU( sign(<'g'^~ekR.3, 'g'^~ekI.2>, ~ltkR.1) ) @ #vk.21 )
        case c_sign
        solve( !KU( KDF('g'^(~ekI.2*~ekR.3)) ) @ #vk.7 )
          case Sessionkey_Reveal_case_1
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.3*~ekR.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.34 )
              case c_sign
              by solve( !KU( ~ltkR.2 ) @ #vk.37 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_2
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.3*~ekR.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.35 )
              case c_sign
              by solve( !KU( ~ltkR.2 ) @ #vk.38 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_3
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( sign(<'g'^(~ekI.3*~ekR.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.35 )
              case c_sign
              solve( !KU( 'g'^(~ekI.3*~ekR.4*inv(~tid.1)) ) @ #vk.39 )
                case Init_1
                by solve( !KU( ~ekR.5 ) @ #vk.42 )
              next
                case Resp_1
                by solve( !KU( ~ekI.4 ) @ #vk.47 )
              next
                case c_exp
                by solve( !KU( ~ekI.3 ) @ #vk.43 )
              qed
            qed
          next
            case split_case_2
            solve( !KU( mac('g'^(~tid.1*~ekR.4),
                            sign(<'g'^~ekR.4, 'g'^~tid.1>, ~ltkR.2))
                   ) @ #vk.36 )
              case c_mac
              solve( !KU( 'g'^(~tid.1*~ekR.4) ) @ #vk.37 )
                case Init_1
                by solve( !KU( ~ekR.5 ) @ #vk.39 )
              next
                case Resp_1
                by solve( !KU( ~tid.2 ) @ #vk.44 )
              next
                case c_exp
                by solve( !KU( ~tid.1 ) @ #vk.41 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_4
          solve( splitEqs(2) )
            case split
            solve( !KU( sign(<'g'^(~ekI.3*~ekR.4*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.2)
                   ) @ #vk.36 )
              case c_sign
              solve( !KU( 'g'^(~ekI.3*~ekR.4*inv(~tid.1)) ) @ #vk.40 )
                case Init_1
                by solve( !KU( ~ekR.5 ) @ #vk.43 )
              next
                case Resp_1
                by solve( !KU( ~ekI.4 ) @ #vk.48 )
              next
                case c_exp
                by solve( !KU( ~ekI.3 ) @ #vk.44 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_5
          solve( splitEqs(3) )
            case split_case_1
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.30 )
              case c_sign
              by solve( !KU( ~ltkI.1 ) @ #vk.38 )
            qed
          next
            case split_case_2
            by contradiction /* from formulas */
          qed
        next
          case Sessionkey_Reveal_case_6
          solve( splitEqs(3) )
            case split
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.31 )
              case c_sign
              by solve( !KU( ~ltkI.1 ) @ #vk.39 )
            qed
          qed
        next
          case Sessionkey_Reveal_case_7
          solve( splitEqs(3) )
            case split
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.31 )
              case c_sign
              solve( !KU( 'g'^(~ekI.4*~ekR.5*inv(~tid.1)) ) @ #vk.40 )
                case Init_1
                by solve( !KU( ~ekR.6 ) @ #vk.43 )
              next
                case Resp_1
                by solve( !KU( ~ekI.5 ) @ #vk.48 )
              next
                case c_exp
                by solve( !KU( ~ekI.4 ) @ #vk.44 )
              qed
            qed
          qed
        next
          case Sessionkey_Reveal_case_8
          solve( splitEqs(3) )
            case split
            solve( !KU( sign(<'g'^(~ekI.4*~ekR.5*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                   ) @ #vk.32 )
              case c_sign
              solve( !KU( 'g'^(~ekI.4*~ekR.5*inv(~tid.1)) ) @ #vk.41 )
                case Init_1
                by solve( !KU( ~ekR.6 ) @ #vk.44 )
              next
                case Resp_1
                by solve( !KU( ~ekI.5 ) @ #vk.49 )
              next
                case c_exp
                by solve( !KU( ~ekI.4 ) @ #vk.45 )
              qed
            qed
          qed
        next
          case c_KDF
          solve( !KU( 'g'^(~ekI.2*~ekR.3) ) @ #vk.27 )
            case Init_1
            by solve( !KU( ~ekR.4 ) @ #vk.28 )
          next
            case Resp_1
            by solve( !KU( ~ekI.3 ) @ #vk.33 )
          next
            case c_exp
            by solve( !KU( ~ekI.2 ) @ #vk.30 )
          qed
        qed
      qed
    next
      case Resp_1
      solve( !KU( KDF('g'^(~ekR.5*~ekR.6)) ) @ #vk.7 )
        case Sessionkey_Reveal_case_1
        solve( splitEqs(2) )
          case split
          solve( !KU( sign(<'g'^(~ekR.7*~ekR.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.25 )
            case c_sign
            by solve( !KU( ~ltkR.1 ) @ #vk.28 )
          qed
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( splitEqs(2) )
          case split
          solve( !KU( sign(<'g'^(~ekR.7*~ekR.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.26 )
            case c_sign
            by solve( !KU( ~ltkR.1 ) @ #vk.29 )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( splitEqs(2) )
          case split
          solve( !KU( sign(<'g'^(~ekR.7*~ekR.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.26 )
            case c_sign
            solve( !KU( 'g'^(~ekR.7*~ekR.8*inv(~tid.1)) ) @ #vk.30 )
              case Resp_1_case_1
              by solve( !KU( ~ekR.10 ) @ #vk.38 )
            next
              case Resp_1_case_2
              by solve( !KU( ~ekR.10 ) @ #vk.38 )
            next
              case c_exp
              by solve( !KU( ~ekR.7 ) @ #vk.34 )
            qed
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( splitEqs(2) )
          case split
          solve( !KU( sign(<'g'^(~ekR.7*~ekR.8*inv(~tid.1)), 'g'^~tid.1>, ~ltkR.1)
                 ) @ #vk.27 )
            case c_sign
            solve( !KU( 'g'^(~ekR.7*~ekR.8*inv(~tid.1)) ) @ #vk.31 )
              case Resp_1_case_1
              by solve( !KU( ~ekR.10 ) @ #vk.39 )
            next
              case Resp_1_case_2
              by solve( !KU( ~ekR.10 ) @ #vk.39 )
            next
              case c_exp
              by solve( !KU( ~ekR.7 ) @ #vk.35 )
            qed
          qed
        qed
      next
        case Sessionkey_Reveal_case_5
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( sign(<'g'^(~ekR.9*~ekR.10*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.21 )
            case c_sign
            by solve( !KU( ~ltkI.1 ) @ #vk.29 )
          qed
        next
          case split_case_2
          solve( !KU( sign(<'g'^~x.7, 'g'^~tid.2>, ~ltkI.1) ) @ #vk.21 )
            case Resp_1
            solve( !KU( mac('g'^(~tid.3*~x.8), sign(<'g'^~tid.3, 'g'^~x.8>, ~ltkR.1))
                   ) @ #vk.6 )
              case Resp_1
              solve( !KU( 'g'^~x.8 ) @ #vk.37 )
                case Resp_1
                solve( !KU( 'g'^~tid.3 ) @ #vk.42 )
                  case Resp_1
                  by contradiction /* cyclic */
                next
                  case c_exp
                  by contradiction /* cyclic */
                qed
              next
                case c_exp
                by solve( !KU( ~x.8 ) @ #vk.39 )
              qed
            next
              case c_mac
              solve( !KU( 'g'^(~tid.3*~x.8) ) @ #vk.33 )
                case Resp_1_case_1
                by solve( !KU( ~tid.4 ) @ #vk.40 )
              next
                case Resp_1_case_2
                by solve( !KU( ~x.9 ) @ #vk.40 )
              next
                case c_exp
                by solve( !KU( ~tid.3 ) @ #vk.37 )
              qed
            qed
          next
            case c_sign
            by solve( !KU( ~ltkI.1 ) @ #vk.29 )
          qed
        next
          case split_case_3
          by contradiction /* from formulas */
        qed
      next
        case Sessionkey_Reveal_case_6
        solve( splitEqs(3) )
          case split
          solve( !KU( sign(<'g'^(~ekR.9*~ekR.10*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.22 )
            case c_sign
            by solve( !KU( ~ltkI.1 ) @ #vk.30 )
          qed
        qed
      next
        case Sessionkey_Reveal_case_7
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( sign(<'g'^(~ekR.9*~ekR.10*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.22 )
            case c_sign
            solve( !KU( 'g'^(~ekR.9*~ekR.10*inv(~tid.1)) ) @ #vk.31 )
              case Resp_1_case_1
              by solve( !KU( ~ekR.12 ) @ #vk.39 )
            next
              case Resp_1_case_2
              by solve( !KU( ~ekR.12 ) @ #vk.39 )
            next
              case c_exp
              by solve( !KU( ~ekR.9 ) @ #vk.35 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( sign(<'g'^~x.7, 'g'^~tid.2>, ~ltkI.1) ) @ #vk.22 )
            case c_sign
            solve( !KU( mac('g'^(~tid.2*~x.7), sign(<'g'^~x.7, 'g'^~tid.2>, ~ltkI.1))
                   ) @ #vk.23 )
              case c_mac
              solve( !KU( 'g'^(~tid.2*~x.7) ) @ #vk.33 )
                case Resp_1_case_1
                by solve( !KU( ~tid.3 ) @ #vk.40 )
              next
                case Resp_1_case_2
                by solve( !KU( ~x.8 ) @ #vk.40 )
              next
                case c_exp
                by solve( !KU( ~tid.2 ) @ #vk.37 )
              qed
            qed
          qed
        qed
      next
        case Sessionkey_Reveal_case_8
        solve( splitEqs(3) )
          case split
          solve( !KU( sign(<'g'^(~ekR.9*~ekR.10*inv(~tid.1)), 'g'^~tid.1>, ~ltkI.1)
                 ) @ #vk.23 )
            case c_sign
            solve( !KU( 'g'^(~ekR.9*~ekR.10*inv(~tid.1)) ) @ #vk.32 )
              case Resp_1_case_1
              by solve( !KU( ~ekR.12 ) @ #vk.40 )
            next
              case Resp_1_case_2
              by solve( !KU( ~ekR.12 ) @ #vk.40 )
            next
              case c_exp
              by solve( !KU( ~ekR.9 ) @ #vk.36 )
            qed
          qed
        qed
      next
        case c_KDF
        solve( !KU( 'g'^(~ekR.5*~ekR.6) ) @ #vk.18 )
          case Resp_1_case_1
          by solve( !KU( ~ekR.8 ) @ #vk.24 )
        next
          case Resp_1_case_2
          by solve( !KU( ~ekR.8 ) @ #vk.24 )
        next
          case c_exp
          by solve( !KU( ~ekR.5 ) @ #vk.21 )
        qed
      qed
    next
      case c_sign
      by solve( !KU( ~ltkI ) @ #vk.14 )
    qed
  next
    case Resp_1_case_2
    by contradiction /* from formulas */
  qed
qed



















/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Init_2: 
Failed to derive Variable(s): ~ltkR

Rule Resp_2: 
Failed to derive Variable(s): ~ltkI
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/csf12/STS_MAC_fix1.spthy

  output:          examples/csf12/STS_MAC_fix1.spthy.tmp
  processing time: 2.12s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  KI_Perfect_Forward_Secrecy_I (all-traces): verified (109 steps)
  KI_Perfect_Forward_Secrecy_R (all-traces): verified (160 steps)

==============================================================================
*/
