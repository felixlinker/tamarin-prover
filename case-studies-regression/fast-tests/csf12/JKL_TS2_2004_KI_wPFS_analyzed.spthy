theory JKL_TS2_2004_KI_wPFS begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2









section{* Jeong, Katz, Lee : TS2 (2004) *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<hkI, Y, Y^~ekI, 'g'^~lkR^~lkI>) )
  ]->
   [ !Sessk( ~ekI, h(<hkI, Y, Y^~ekI, 'g'^~lkR^~lkI>) ) ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~x ) ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<hkI, Y, z, 'g'^(~lkI*~x)>) ) ]->
     [ !Sessk( ~ekI, h(<hkI, Y, z, 'g'^(~lkI*~x)>) ) ]
    variants (modulo AC)
    1. ~ekI  = ~ekI.3
       Y     = Y.3
       z     = Y.3^~ekI.3
    
    2. ~ekI  = ~ekI.3
       Y     = x.10^x.11
       z     = x.10^(~ekI.3*x.11)
    
    3. ~ekI  = ~x.12
       Y     = x.15^inv(~x.12)
       z     = x.15
    
    4. ~ekI  = ~x.13
       Y     = x.16^inv((~x.13*x.17))
       z     = x.16^inv(x.17)
    
    5. ~ekI  = ~x.13
       Y     = x.16^(x.17*inv(~x.13))
       z     = x.16^x.17
    
    6. ~ekI  = ~x.14
       Y     = x.17^(x.18*inv((~x.14*x.19)))
       z     = x.17^(x.18*inv(x.19))
    
    7. Y     = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR,
          h(<X, 'g'^~ekR, X^~ekR, 'g'^~lkI^~lkR>)
  )
  ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<X, 'g'^~ekR, X^~ekR, 'g'^~lkI^~lkR>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~x ) ]
    --[
    SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<X, 'g'^~ekR, z, 'g'^(~lkR*~x)>) )
    ]->
     [
     Out( 'g'^~ekR ), !Ephk( ~ekR ),
     !Sessk( ~ekR, h(<X, 'g'^~ekR, z, 'g'^(~lkR*~x)>) )
     ]
    variants (modulo AC)
    1. ~ekR  = ~ekR.3
       X     = X.3
       z     = X.3^~ekR.3
    
    2. ~ekR  = ~ekR.3
       X     = x.13^x.14
       z     = x.13^(~ekR.3*x.14)
    
    3. ~ekR  = ~x.15
       X     = x.18^inv(~x.15)
       z     = x.18
    
    4. ~ekR  = ~x.16
       X     = x.19^inv((~x.16*x.20))
       z     = x.19^inv(x.20)
    
    5. ~ekR  = ~x.16
       X     = x.19^(x.20*inv(~x.16))
       z     = x.19^x.20
    
    6. ~ekR  = ~x.17
       X     = x.20^(x.21*inv((~x.17*x.22)))
       z     = x.20^(x.21*inv(x.22))
    
    7. X     = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma JKL2008_2_initiator_key:
  all-traces
  "¬(∃ #i1 #i2 ttest I R k hkI hkR.
      ((((((SidI_2( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)) ∧
          (∀ #i3 t. (EphkRev( t ) @ #i3) ⇒ (⊥))) ∧
         (∀ #i3. (SesskRev( ttest ) @ #i3) ⇒ (⊥))) ∧
        (∀ #i3 #i4 tpartner kpartner.
          ((SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
           (SesskRev( tpartner ) @ #i4)) ⇒
          (⊥))) ∧
       (∀ #i3.
         (LtkRev( I ) @ #i3) ⇒
         (∃ #i4 tpartner kpartner.
           SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i4))) ∧
      (∀ #i3.
        (LtkRev( R ) @ #i3) ⇒
        (∃ #i4 tpartner kpartner.
          SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i4)))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 ttest I R k hkI hkR.
  (SidI_2( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)
 ∧
  (∀ #i3 t. (EphkRev( t ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3. (SesskRev( ttest ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3 #i4 tpartner kpartner.
    (SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
    (SesskRev( tpartner ) @ #i4)
   ⇒
    ⊥) ∧
  (∀ #i3.
    (LtkRev( I ) @ #i3)
   ⇒
    ∃ #i4 tpartner kpartner.
     (SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i4)) ∧
  (∀ #i3.
    (LtkRev( R ) @ #i3)
   ⇒
    ∃ #i4 tpartner kpartner.
     (SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i4))"
*/
simplify
solve( Init_1( ~ekI, $I.1, $R.1, ~lkI, hkI.1 ) ▶₀ #i1 )
  case Init_1
  solve( !Pk( $R.1, 'g'^~x ) ▶₂ #i1 )
    case generate_ltk
    solve( !KU( h(<'g'^~ekI, Y, z, 'g'^(~lkI*~x)>) ) @ #vk.1 )
      case Sessk_reveal_case_3
      solve( !KU( 'g'^~ekI.1 ) @ #vk.2 )
        case Init_1
        solve( !KU( 'g'^~tid ) @ #vk )
          case Resp_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma JKL2008_2_responder_key:
  all-traces
  "¬(∃ #i1 #i2 ttest I R k hkI hkR.
      ((((((SidR_1( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)) ∧
          (∀ #i3 t. (EphkRev( t ) @ #i3) ⇒ (⊥))) ∧
         (∀ #i3. (SesskRev( ttest ) @ #i3) ⇒ (⊥))) ∧
        (∀ #i3 #i4 tpartner kpartner.
          ((SidI_2( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
           (SesskRev( tpartner ) @ #i4)) ⇒
          (⊥))) ∧
       (∀ #i3.
         (LtkRev( I ) @ #i3) ⇒
         (∃ #i4 tpartner. SidI_1( tpartner, I, R, hkI ) @ #i4))) ∧
      (∀ #i3.
        (LtkRev( R ) @ #i3) ⇒
        (∃ #i4 tpartner. SidI_1( tpartner, I, R, hkI ) @ #i4)))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 ttest I R k hkI hkR.
  (SidR_1( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)
 ∧
  (∀ #i3 t. (EphkRev( t ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3. (SesskRev( ttest ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3 #i4 tpartner kpartner.
    (SidI_2( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
    (SesskRev( tpartner ) @ #i4)
   ⇒
    ⊥) ∧
  (∀ #i3.
    (LtkRev( I ) @ #i3)
   ⇒
    ∃ #i4 tpartner. (SidI_1( tpartner, I, R, hkI ) @ #i4)) ∧
  (∀ #i3.
    (LtkRev( R ) @ #i3)
   ⇒
    ∃ #i4 tpartner. (SidI_1( tpartner, I, R, hkI ) @ #i4))"
*/
simplify
solve( !Ltk( $R.1, ~lkR ) ▶₂ #i1 )
  case generate_ltk
  solve( !Pk( $I.1, 'g'^~x ) ▶₃ #i1 )
    case generate_ltk
    solve( !KU( h(<X, 'g'^~ekR, z, 'g'^(~lkR*~x)>) ) @ #vk.1 )
      case Sessk_reveal_case_1
      solve( !KU( 'g'^~ekR.1 ) @ #vk.2 )
        case Resp_1
        solve( !KU( 'g'^~tid ) @ #vk.3 )
          case Init_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed









/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Init_2: 
Failed to derive Variable(s): ~lkR

Rule Resp_1: 
Failed to derive Variable(s): ~lkI
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/csf12/JKL_TS2_2004_KI_wPFS.spthy

  output:          examples/csf12/JKL_TS2_2004_KI_wPFS.spthy.tmp
  processing time: 0.31s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  JKL2008_2_initiator_key (all-traces): falsified - found trace (7 steps)
  JKL2008_2_responder_key (all-traces): falsified - found trace (7 steps)

==============================================================================
*/
