theory KCL07 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2









rule (modulo E) Setup:
   [ Fr( ~k ), Fr( ~id ) ]
  --[ OnlyOnce( ) ]->
   [ !Reader( ~k, ~id ), !Tag( ~k, ~id ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ) ]->
   [ Out( <(~id⊕~r2), (~r2⊕h(<r1, ~k>))> ) ]

  /*
  rule (modulo AC) tag1:
     [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
    --[ Response( ~k, 'Tag' ) ]->
     [ Out( <z, (~r2⊕h(<r1, ~k>))> ) ]
    variants (modulo AC)
    1. ~id   = ~x.6
       ~r2   = ~x.6
       z     = zero
    
    2. ~id   = ~id.3
       ~r2   = ~r2.3
       z     = (~id.3⊕~r2.3)
  */

rule (modulo E) reader2:
   [ Initiated( ~r1 ), !Reader( ~k, ~id ), In( xoredhash ) ]
  --[ Alive( ~k, 'Tag' ), Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma recentalive_tag:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
simplify
solve( Initiated( ~r1 ) ▶₀ #i )
  case reader1
  solve( !Reader( ~k, ~id ) ▶₁ #i )
    case Setup
    solve( !KU( (~id⊕h(<~r1, ~k>)) ) @ #vk )
      case c_xor
      solve( !KU( ~id ) @ #vk.2 )
        case tag1
        solve( !KU( ~y ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          solve( !KU( h(<~r1, ~k.2>) ) @ #vk.1 )
            case c_h
            by solve( !KU( ~k.2 ) @ #vk.9 )
          next
            case tag1
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case coerce
      solve( !KD( (~id⊕h(<~r1, ~k>)) ) ▶₀ #vk )
        case reader1
        by contradiction /* impossible chain */
      next
        case tag1
        solve( (#vl, 0) ~~> (#vk, 0) )
          case d_0_fst
          solve( !Tag( ~k.1, ~id.1 ) ▶₂ #vr.2 )
            case Setup
            solve( splitEqs(1) )
              case split
              solve( (#vr.3, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                solve( (#vr.5, 0) ~~> (#vk, 0) )
                  case Xor
                  solve( !KU( (~y.1⊕h(<~r1.2, ~k.2>)) ) @ #vk.2 )
                    case c_xor
                    solve( !KU( ~y.1 ) @ #vk.4 )
                      case tag1_case_1
                      solve( !KU( ~y.2 ) @ #vk.6 )
                        case tag1
                        solve( !KU( ~y.3 ) @ #vk.8 )
                          case tag1_case_1
                          by contradiction /* cyclic */
                        next
                          case tag1_case_2
                          solve( !KU( h(<~r1.2, ~k.5>) ) @ #vk.3 )
                            case c_h
                            by solve( !KU( ~k.5 ) @ #vk.13 )
                          next
                            case tag1
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case tag1_case_2
                      solve( !KU( h(<~r1.2, ~k.3>) ) @ #vk.3 )
                        case c_h
                        by solve( !KU( ~k.3 ) @ #vk.9 )
                      next
                        case tag1
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~y.1⊕h(<~r1.2, ~k.2>)) ) ▶₀ #vk.2 )
                      case reader1
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        solve( !Tag( ~k.3, ~id.4 ) ▶₂ #vr.6 )
                          case Setup
                          solve( splitEqs(7) )
                            case split
                            solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                              case d_xor_case_1
                              by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                            next
                              case d_xor_case_2
                              solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                case Xor
                                by contradiction /* cyclic */
                              qed
                            next
                              case d_xor_case_3
                              by contradiction /* impossible chain */
                            next
                              case d_xor_case_4
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case d_0_snd
                        solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                          case Xor
                          by contradiction /* cyclic */
                        next
                          case d_xor_case_1
                          solve( (#vr.8, 0) ~~> (#vk.2, 0) )
                            case Xor
                            by contradiction /* from formulas */
                          qed
                        next
                          case d_xor_case_2
                          solve( (#vr.8, 0) ~~> (#vk.2, 0) )
                            case Xor
                            solve( !KU( (h(<r1.4, ~k.4>)⊕h(<~r1.5, ~k.4>)) ) @ #vk.4 )
                              case c_xor
                              solve( !KU( h(<~r1.5, ~k.4>) ) @ #vk.5 )
                                case c_h
                                by solve( !KU( ~k.4 ) @ #vk.9 )
                              next
                                case tag1
                                by contradiction /* from formulas */
                              qed
                            next
                              case coerce
                              solve( !KD( (h(<r1.4, ~k.4>)⊕h(<~r1.5, ~k.4>)) ) ▶₀ #vk.4 )
                                case reader1
                                by contradiction /* impossible chain */
                              next
                                case tag1
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  solve( !Tag( ~k.6, ~id.5 ) ▶₂ #vr.9 )
                                    case Setup
                                    solve( splitEqs(12) )
                                      case split
                                      solve( (#vr.10, 0) ~~> (#vk.4, 0) )
                                        case d_xor_case_1
                                        by solve( (#vr.12, 0) ~~> (#vk.4, 0) )
                                      next
                                        case d_xor_case_2
                                        by solve( (#vr.12, 0) ~~> (#vk.4, 0) )
                                      next
                                        case d_xor_case_3
                                        by contradiction /* impossible chain */
                                      next
                                        case d_xor_case_4
                                        by contradiction /* impossible chain */
                                      qed
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  solve( (#vr.10, 0) ~~> (#vk.4, 0) )
                                    case d_xor_case_1
                                    solve( (#vr.11, 0) ~~> (#vk.4, 0) )
                                      case Xor_case_1
                                      by contradiction /* from formulas */
                                    next
                                      case Xor_case_2
                                      solve( !Tag( ~k.8, ~id.5 ) ▶₂ #vr.9 )
                                        case Setup
                                        solve( splitEqs(12) )
                                          case split
                                          solve( !KU( (~r2.6⊕h(<~r1.9, ~k.8>)) ) @ #vk.6 )
                                            case c_xor
                                            solve( !KU( ~r2.6 ) @ #vk.8 )
                                              case tag1_case_1
                                              solve( !KU( ~y.5 ) @ #vk.10 )
                                                case tag1
                                                solve( !KU( ~y.6 ) @ #vk.12 )
                                                  case tag1_case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case tag1_case_2
                                                  solve( !KU( h(<~r1.9, ~k.11>) ) @ #vk.7 )
                                                    case c_h
                                                    by solve( !KU( ~k.11 ) @ #vk.17 )
                                                  next
                                                    case tag1
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case tag1_case_2
                                              solve( !KU( h(<~r1.9, ~k.9>) ) @ #vk.7 )
                                                case c_h
                                                by solve( !KU( ~k.9 ) @ #vk.13 )
                                              next
                                                case tag1
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case coerce
                                            solve( !KD( (~r2.6⊕h(<~r1.9, ~k.8>)) ) ▶₀ #vk.6 )
                                              case reader1
                                              by contradiction /* impossible chain */
                                            next
                                              case tag1
                                              solve( (#vl.3, 0) ~~> (#vk.6, 0) )
                                                case d_0_fst
                                                solve( !Tag( ~k.9, ~id.7 ) ▶₂ #vr.13 )
                                                  case Setup
                                                  solve( splitEqs(18) )
                                                    case split
                                                    solve( (#vr.14, 0) ~~> (#vk.6, 0) )
                                                      case d_xor_case_1
                                                      solve( (#vr.16, 0) ~~> (#vk.6, 0) )
                                                        case Xor
                                                        by contradiction /* cyclic */
                                                      qed
                                                    next
                                                      case d_xor_case_2
                                                      by solve( (#vr.16, 0) ~~> (#vk.6, 0) )
                                                    next
                                                      case d_xor_case_3
                                                      by contradiction /* impossible chain */
                                                    next
                                                      case d_xor_case_4
                                                      by contradiction /* impossible chain */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case d_0_snd
                                                solve( (#vr.14, 0) ~~> (#vk.6, 0) )
                                                  case d_xor_case_1
                                                  solve( (#vr.15, 0) ~~> (#vk.6, 0) )
                                                    case Xor
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case d_xor_case_2
                                                  solve( (#vr.15, 0) ~~> (#vk.6, 0) )
                                                    case Xor
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case d_xor_case_3
                                                  by solve( (#vr.15, 0) ~~> (#vk.6, 0) )
                                                next
                                                  case d_xor_case_4
                                                  by contradiction /* impossible chain */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case d_xor_case_2
                                    by solve( (#vr.11, 0) ~~> (#vk.4, 0) )
                                  next
                                    case d_xor_case_3
                                    by solve( (#vr.11, 0) ~~> (#vk.4, 0) )
                                  next
                                    case d_xor_case_4
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case d_xor_case_3
                          by solve( (#vr.8, 0) ~~> (#vk.2, 0) )
                        next
                          case d_xor_case_4
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case d_xor_case_2
                by solve( (#vr.5, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by contradiction /* impossible chain */
              next
                case d_xor_case_4
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case d_0_snd
          solve( (#vr.3, 0) ~~> (#vk, 0) )
            case d_xor_case_1
            solve( (#vr.4, 0) ~~> (#vk, 0) )
              case Xor
              by contradiction /* from formulas */
            qed
          next
            case d_xor_case_2
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_xor_case_3
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_xor_case_4
            by contradiction /* impossible chain */
          qed
        qed
      qed
    qed
  qed
qed

lemma executable:
  exists-trace
  "∃ x #i #j.
    ((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
    (¬(∃ #k. (Response( x, 'Tag' ) @ #k) ∧ (¬(#j = #k))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  ∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k"
*/
simplify
solve( Initiated( ~r1 ) ▶₀ #i )
  case reader1
  solve( !Reader( ~k.1, ~id ) ▶₁ #i )
    case Setup
    solve( !Tag( ~k.1, ~id.1 ) ▶₂ #j )
      case Setup
      solve( splitEqs(1) )
        case split
        solve( !KU( (~id.2⊕h(<~r1, ~k.1>)) ) @ #vk )
          case coerce
          solve( !KD( (~id.2⊕h(<~r1, ~k.1>)) ) ▶₀ #vk )
            case tag1
            solve( (#vl, 0) ~~> (#vk, 0) )
              case d_0_fst
              solve( !Tag( ~k.2, ~id.3 ) ▶₂ #vr.3 )
                case Setup
                solve( (#vr.4, 0) ~~> (#vk, 0) )
                  case d_xor_case_1
                  solve( (#vr.6, 0) ~~> (#vk, 0) )
                    case Xor
                    solve( !KU( (~y.1⊕h(<~r1.3, ~k.3>)) ) @ #vk.3 )
                      case coerce
                      solve( !KD( (~y.1⊕h(<~r1.3, ~k.3>)) ) ▶₀ #vk.3 )
                        case tag1
                        solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                          case d_0_snd
                          solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                            case Xor
                            solve( !KU( ~r1.5 ) @ #vk.4 )
                              case reader1
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed









/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/csf18-xor/KCL07.spthy

  output:          examples/csf18-xor/KCL07.spthy.tmp
  processing time: 0.40s
  
  recentalive_tag (all-traces): verified (106 steps)
  executable (exists-trace): verified (17 steps)

==============================================================================
*/
