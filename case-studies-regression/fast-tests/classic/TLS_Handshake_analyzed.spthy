theory TLS_Handshake begin

// Function signature and definition of the equational theory E

functions: PRF/1, adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, sdec/2,
           senc/2, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true













section{* TLS Handshake *}

text{*
  Modeled after Paulson`s TLS model in Isabelle/src/HOL/Auth/TLS.thy. Notable
  differences are:

    1. We use explicit global constants to differentiate between different
       encryptions instead of implicit sources.

    2. We model session keys directly as hashes of the relevant information.
       Due to our support for composed keys, we do not need any custom
       axiomatization as Paulson does.

*}

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltkA ) ] --[ RevLtk( A ) ]-> [ Out( ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_1:
   [ Fr( ~nc ), Fr( ~sid ) ]
  -->
   [ Out( <$C, ~nc, ~sid, $pc> ), St_C_1( $C, ~nc, ~sid, $pc ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1:
   [ In( <$C, nc, sid, pc> ), Fr( ~ns ) ]
  -->
   [ Out( <$S, ~ns, sid, $ps> ), St_S_1( $S, $C, sid, nc, pc, ~ns, $ps ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_2:
   [
   St_C_1( C, nc, sid, pc ), In( <S, ns, sid, ps> ), Fr( ~pms ),
   !Pk( S, pkS ), !Ltk( C, ltkC )
   ]
  --[
  Running( S, C,
           <'server', PRF(<~pms, nc, ns>), 
            h(<'serverKey', nc, ns, PRF(<~pms, nc, ns>)>), 
            h(<'clientKey', nc, ns, PRF(<~pms, nc, ns>)>)>
  )
  ]->
   [
   Out( <aenc(<'31', ~pms>, pkS), 
         sign(<'32', h(<'32', ns, S, ~pms>)>, ltkC), 
         senc(<'33', sid, PRF(<~pms, nc, ns>), nc, pc, C, ns, ps, S>,
              h(<'clientKey', nc, ns, PRF(<~pms, nc, ns>)>))
        >
   ),
   St_C_2( S, C, sid, nc, pc, ns, ps, ~pms )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_2:
   [
   St_S_1( S, C, sid, nc, pc, ns, ps ),
   In( <aenc(<'31', pms>, pk(ltkS)), signature, 
        senc(<'33', sid, PRF(<pms, nc, ns>), nc, pc, C, ns, ps, S>,
             h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>))
       >
   ),
   !Pk( C, pkC ), !Ltk( S, ltkS )
   ]
  --[
  Eq( verify(signature, <'32', h(<'32', ns, S, pms>)>, pkC), true ),
  SessionKeys( S, C, h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>),
               h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)
  ),
  Running( C, S,
           <'client', PRF(<pms, nc, ns>), 
            h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>), 
            h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)>
  ),
  Commit( S, C,
          <'server', PRF(<pms, nc, ns>), 
           h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>), 
           h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)>
  )
  ]->
   [
   Out( senc(<'4', sid, PRF(<pms, nc, ns>), nc, pc, C, ns, ps, S>,
             h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>))
   )
   ]

  /*
  rule (modulo AC) S_2:
     [
     St_S_1( S, C, sid, nc, pc, ns, ps ),
     In( <aenc(<'31', pms>, pk(ltkS)), signature, 
          senc(<'33', sid, PRF(<pms, nc, ns>), nc, pc, C, ns, ps, S>,
               h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>))
         >
     ),
     !Pk( C, pkC ), !Ltk( S, ltkS )
     ]
    --[
    Eq( z, true ),
    SessionKeys( S, C, h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>),
                 h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)
    ),
    Running( C, S,
             <'client', PRF(<pms, nc, ns>), 
              h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>), 
              h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)>
    ),
    Commit( S, C,
            <'server', PRF(<pms, nc, ns>), 
             h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>), 
             h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)>
    )
    ]->
     [
     Out( senc(<'4', sid, PRF(<pms, nc, ns>), nc, pc, C, ns, ps, S>,
               h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>))
     )
     ]
    variants (modulo AC)
    1. S     = S.3
       ns    = ns.3
       pkC   = pkC.3
       pms   = pms.3
       signature
             = signature.3
       z     = verify(signature.3, <'32', h(<'32', ns.3, S.3, pms.3>)>, pkC.3)
    
    2. S     = x.7
       ns    = x.10
       pkC   = pk(x.12)
       pms   = x.13
       signature
             = sign(<'32', h(<'32', x.10, x.7, x.13>)>, x.12)
       z     = true
  */

rule (modulo E) C_3:
   [
   St_C_2( S, C, sid, nc, pc, ns, ps, pms ),
   In( senc(<'4', sid, PRF(<pms, nc, ns>), nc, pc, C, ns, ps, S>,
            h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>))
   )
   ]
  --[
  Commit( C, S,
          <'client', PRF(<pms, nc, ns>), 
           h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>), 
           h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)>
  ),
  SessionKeys( S, C, h(<'serverKey', nc, ns, PRF(<pms, nc, ns>)>),
               h(<'clientKey', nc, ns, PRF(<pms, nc, ns>)>)
  )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma session_key_secrecy:
  all-traces
  "¬(∃ S C keyS keyC #k.
      (((SessionKeys( S, C, keyS, keyC ) @ #k) ∧
        ((∃ #i. K( keyS ) @ #i) ∨ (∃ #i. K( keyC ) @ #i))) ∧
       (¬(∃ #r. RevLtk( S ) @ #r))) ∧
      (¬(∃ #r. RevLtk( C ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ S C keyS keyC #k.
  (SessionKeys( S, C, keyS, keyC ) @ #k)
 ∧
  (((∃ #i. (K( keyS ) @ #i)) ∨ (∃ #i. (K( keyC ) @ #i)))) ∧
  (∀ #r. (RevLtk( S ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( C ) @ #r) ⇒ ⊥)"
*/
simplify
solve( (∃ #i. (K( keyS ) @ #i))  ∥ (∃ #i. (K( keyC ) @ #i)) )
  case case_1
  solve( SessionKeys( S, C, x, keyC ) @ #k )
    case C_3
    solve( St_C_2( S.1, C.1, sid, nc, pc, ns, ps, pms ) ▶₀ #k )
      case C_2
      solve( !KU( h(<'serverKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>)
             ) @ #vk )
        case c_h
        solve( !KU( senc(<'4', ~sid.1, PRF(<~pms.1, ~nc.1, ns>), ~nc.1, $pc.1, 
                          $C.2, ns, ps, $A>,
                         h(<'serverKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>))
               ) @ #vk.1 )
          case S_2
          solve( !KU( sign(<'32', h(<'32', ~ns.1, $A, ~pms.1>)>, ~ltkA.3)
                 ) @ #vk.19 )
            case C_2
            solve( !KU( PRF(<~pms.1, ~nc.2, ~ns.1>) ) @ #vk.15 )
              case C_2
              solve( !KU( h(<'clientKey', ~nc.2, ~ns.1, PRF(<~pms.1, ~nc.2, ~ns.1>)>)
                     ) @ #vk.42 )
                case c_h
                by contradiction /* cyclic */
              qed
            next
              case S_2
              by contradiction /* cyclic */
            next
              case c_PRF
              solve( !KU( ~pms.1 ) @ #vk.36 )
                case C_2
                solve( !KU( ~ltkA.5 ) @ #vk.47 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~ltkA.3 ) @ #vk.29 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( PRF(<~pms.1, ~nc.1, ns>) ) @ #vk.22 )
            case C_2
            solve( !KU( h(<'clientKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>)
                   ) @ #vk.41 )
              case c_h
              by contradiction /* cyclic */
            qed
          next
            case S_2
            by contradiction /* cyclic */
          next
            case c_PRF
            solve( !KU( ~pms.1 ) @ #vk.35 )
              case C_2
              solve( !KU( ~ltkA.2 ) @ #vk.46 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case S_2
    solve( St_S_1( S.2, C.1, sid, nc, pc, ns.1, ps ) ▶₀ #k )
      case S_1
      solve( !Pk( $C.2, pk(x.1) ) ▶₂ #k )
        case Register_pk
        solve( !Ltk( $S.3, ltkS ) ▶₃ #k )
          case Register_pk
          solve( !KU( h(<'serverKey', nc, ~ns.2, PRF(<pms.1, nc, ~ns.2>)>)
                 ) @ #vk )
            case c_h
            solve( !KU( sign(<'32', h(<'32', ~ns.2, $S.3, pms.1>)>, ~ltkA)
                   ) @ #vk.4 )
              case C_2
              solve( !KU( aenc(<'31', ~pms.2>, pk(~ltkA.1)) ) @ #vk.2 )
                case C_2
                solve( !KU( senc(<'33', sid, PRF(<~pms.2, nc, ~ns.2>), nc, pc, $C.4, 
                                  ~ns.2, $ps.1, $A>,
                                 h(<'clientKey', nc, ~ns.2, PRF(<~pms.2, nc, ~ns.2>)>))
                       ) @ #vk.5 )
                  case C_2
                  solve( !KU( PRF(<~pms.2, ~nc.3, ~ns.2>) ) @ #vk.19 )
                    case C_2
                    solve( !KU( h(<'clientKey', ~nc.3, ~ns.2, PRF(<~pms.2, ~nc.3, ~ns.2>)>)
                           ) @ #vk.48 )
                      case c_h
                      by contradiction /* cyclic */
                    qed
                  next
                    case S_2
                    by contradiction /* cyclic */
                  next
                    case c_PRF
                    solve( !KU( ~pms.2 ) @ #vk.42 )
                      case C_2
                      solve( !KU( ~ltkA.6 ) @ #vk.53 )
                        case Reveal_ltk
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( h(<'clientKey', nc, ~ns.2, PRF(<~pms.2, nc, ~ns.2>)>)
                         ) @ #vk.35 )
                    case c_h
                    solve( !KU( PRF(<~pms.2, nc, ~ns.2>) ) @ #vk.58 )
                      case C_2
                      by contradiction /* cyclic */
                    next
                      case S_2
                      by contradiction /* cyclic */
                    next
                      case c_PRF
                      solve( !KU( ~pms.2 ) @ #vk.60 )
                        case C_2
                        solve( !KU( ~ltkA.4 ) @ #vk.71 )
                          case Reveal_ltk
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_aenc
                solve( !KU( ~pms.2 ) @ #vk.30 )
                  case C_2
                  solve( !KU( ~ltkA.3 ) @ #vk.38 )
                    case Reveal_ltk
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~ltkA ) @ #vk.21 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( SessionKeys( S, C, keyS, x ) @ #k )
    case C_3
    solve( St_C_2( S.1, C.1, sid, nc, pc, ns, ps, pms ) ▶₀ #k )
      case C_2
      solve( !KU( h(<'clientKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>)
             ) @ #vk )
        case c_h
        solve( !KU( senc(<'4', ~sid.1, PRF(<~pms.1, ~nc.1, ns>), ~nc.1, $pc.1, 
                          $C.2, ns, ps, $A>,
                         h(<'serverKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>))
               ) @ #vk.1 )
          case S_2
          solve( !KU( sign(<'32', h(<'32', ~ns.1, $A, ~pms.1>)>, ~ltkA.3)
                 ) @ #vk.19 )
            case C_2
            solve( !KU( PRF(<~pms.1, ~nc.2, ~ns.1>) ) @ #vk.15 )
              case C_2
              by contradiction /* cyclic */
            next
              case S_2
              solve( !KU( h(<'serverKey', ~nc.2, ~ns.1, PRF(<~pms.1, ~nc.2, ~ns.1>)>)
                     ) @ #vk.40 )
                case c_h
                by contradiction /* cyclic */
              qed
            next
              case c_PRF
              solve( !KU( ~pms.1 ) @ #vk.36 )
                case C_2
                solve( !KU( ~ltkA.5 ) @ #vk.47 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~ltkA.3 ) @ #vk.29 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(<'serverKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>)
                 ) @ #vk.17 )
            case c_h
            solve( !KU( PRF(<~pms.1, ~nc.1, ns>) ) @ #vk.40 )
              case C_2
              by contradiction /* cyclic */
            next
              case S_2
              by contradiction /* cyclic */
            next
              case c_PRF
              solve( !KU( ~pms.1 ) @ #vk.42 )
                case C_2
                solve( !KU( ~ltkA.2 ) @ #vk.53 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case S_2
    solve( St_S_1( S.2, C.1, sid, nc, pc, ns.1, ps ) ▶₀ #k )
      case S_1
      solve( !Pk( $C.2, pk(x.1) ) ▶₂ #k )
        case Register_pk
        solve( !Ltk( $S.3, ltkS ) ▶₃ #k )
          case Register_pk
          solve( !KU( h(<'clientKey', nc, ~ns.2, PRF(<pms.1, nc, ~ns.2>)>)
                 ) @ #vk )
            case c_h
            solve( !KU( sign(<'32', h(<'32', ~ns.2, $S.3, pms.1>)>, ~ltkA)
                   ) @ #vk.4 )
              case C_2
              solve( !KU( aenc(<'31', ~pms.2>, pk(~ltkA.1)) ) @ #vk.2 )
                case C_2
                solve( !KU( senc(<'33', sid, PRF(<~pms.2, nc, ~ns.2>), nc, pc, $C.4, 
                                  ~ns.2, $ps.1, $A>,
                                 h(<'clientKey', nc, ~ns.2, PRF(<~pms.2, nc, ~ns.2>)>))
                       ) @ #vk.5 )
                  case C_2
                  solve( !KU( PRF(<~pms.2, ~nc.3, ~ns.2>) ) @ #vk.19 )
                    case C_2
                    by contradiction /* cyclic */
                  next
                    case S_2
                    solve( !KU( h(<'serverKey', ~nc.3, ~ns.2, PRF(<~pms.2, ~nc.3, ~ns.2>)>)
                           ) @ #vk.46 )
                      case c_h
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_PRF
                    solve( !KU( ~pms.2 ) @ #vk.42 )
                      case C_2
                      solve( !KU( ~ltkA.6 ) @ #vk.53 )
                        case Reveal_ltk
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( PRF(<~pms.2, nc, ~ns.2>) ) @ #vk.40 )
                    case C_2
                    by contradiction /* cyclic */
                  next
                    case S_2
                    by contradiction /* cyclic */
                  next
                    case c_PRF
                    solve( !KU( ~pms.2 ) @ #vk.53 )
                      case C_2
                      solve( !KU( ~ltkA.4 ) @ #vk.64 )
                        case Reveal_ltk
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case c_aenc
                solve( !KU( ~pms.2 ) @ #vk.30 )
                  case C_2
                  solve( !KU( ~ltkA.3 ) @ #vk.38 )
                    case Reveal_ltk
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~ltkA ) @ #vk.21 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injective_agree:
  all-traces
  "∀ actor peer params #i.
    (Commit( actor, peer, params ) @ #i) ⇒
    (((∃ #j.
        ((Running( actor, peer, params ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ actor2 peer2 #i2.
            (Commit( actor2, peer2, params ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( actor ) @ #r)) ∨
     (∃ #r. RevLtk( peer ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer params #i.
  (Commit( actor, peer, params ) @ #i)
 ∧
  (∀ #j.
    (Running( actor, peer, params ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ actor2 peer2 #i2.
       (Commit( actor2, peer2, params ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Commit( actor, peer, params ) @ #i )
  case C_3
  solve( St_C_2( S, C, sid, nc, pc, ns, ps, pms ) ▶₀ #i )
    case C_2
    solve( !KU( senc(<'4', ~sid.1, PRF(<~pms.1, ~nc.1, ns>), ~nc.1, $pc.1, 
                      $C.1, ns, ps, $A>,
                     h(<'serverKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>))
           ) @ #vk )
      case S_2
      solve( (#i < #i2)  ∥ (#i2 < #i) )
        case case_1
        solve( Commit( actor2, peer2,
                       <'client', PRF(<~pms.1, ~nc.1, ~ns.1>), 
                        h(<'serverKey', ~nc.1, ~ns.1, PRF(<~pms.1, ~nc.1, ~ns.1>)>), 
                        h(<'clientKey', ~nc.1, ~ns.1, PRF(<~pms.1, ~nc.1, ~ns.1>)>)>
               ) @ #i2 )
          case C_3
          solve( St_C_2( S.1, C.2, sid.2, ~nc.1, pc.2, ~ns.1, ps.2, ~pms.1
                 ) ▶₀ #i2 )
            case C_2
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( actor2, peer2,
                       <'client', PRF(<~pms.1, ~nc.1, ~ns.1>), 
                        h(<'serverKey', ~nc.1, ~ns.1, PRF(<~pms.1, ~nc.1, ~ns.1>)>), 
                        h(<'clientKey', ~nc.1, ~ns.1, PRF(<~pms.1, ~nc.1, ~ns.1>)>)>
               ) @ #i2 )
          case C_3
          solve( St_C_2( S.1, C.2, sid.2, ~nc.1, pc.2, ~ns.1, ps.2, ~pms.1
                 ) ▶₀ #i2 )
            case C_2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( h(<'serverKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>)
             ) @ #vk.9 )
        case c_h
        solve( !KU( PRF(<~pms.1, ~nc.1, ns>) ) @ #vk.32 )
          case C_2
          solve( !KU( h(<'clientKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>)
                 ) @ #vk.40 )
            case c_h
            by contradiction /* cyclic */
          qed
        next
          case S_2
          by contradiction /* cyclic */
        next
          case c_PRF
          solve( !KU( ~pms.1 ) @ #vk.34 )
            case C_2
            solve( !KU( ~ltkA.2 ) @ #vk.45 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case S_2
  solve( St_S_1( S.1, C, sid, nc, pc, ns.1, ps ) ▶₀ #i )
    case S_1
    solve( !Pk( $C.1, pk(x) ) ▶₂ #i )
      case Register_pk
      solve( !Ltk( $S.2, ltkS ) ▶₃ #i )
        case Register_pk
        solve( !KU( sign(<'32', h(<'32', ~ns.2, $S.2, pms.1>)>, ~ltkA)
               ) @ #vk.3 )
          case C_2
          solve( !KU( aenc(<'31', ~pms.2>, pk(~ltkA.1)) ) @ #vk.1 )
            case C_2
            solve( !KU( senc(<'33', sid, PRF(<~pms.2, nc, ~ns.2>), nc, pc, $C.3, 
                              ~ns.2, $ps.1, $A>,
                             h(<'clientKey', nc, ~ns.2, PRF(<~pms.2, nc, ~ns.2>)>))
                   ) @ #vk.4 )
              case C_2
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Commit( actor2, peer2,
                               <'server', PRF(<~pms.2, ~nc.3, ~ns.2>), 
                                h(<'serverKey', ~nc.3, ~ns.2, PRF(<~pms.2, ~nc.3, ~ns.2>)>), 
                                h(<'clientKey', ~nc.3, ~ns.2, PRF(<~pms.2, ~nc.3, ~ns.2>)>)>
                       ) @ #i2 )
                  case S_2
                  solve( St_S_1( S.4, C.4, sid.4, ~nc.3, pc.4, ~ns.5, ps.4 ) ▶₀ #i2 )
                    case S_1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case case_2
                solve( Commit( actor2, peer2,
                               <'server', PRF(<~pms.2, ~nc.3, ~ns.2>), 
                                h(<'serverKey', ~nc.3, ~ns.2, PRF(<~pms.2, ~nc.3, ~ns.2>)>), 
                                h(<'clientKey', ~nc.3, ~ns.2, PRF(<~pms.2, ~nc.3, ~ns.2>)>)>
                       ) @ #i2 )
                  case S_2
                  solve( St_S_1( S.4, C.4, sid.4, ~nc.3, pc.4, ~ns.5, ps.4 ) ▶₀ #i2 )
                    case S_1
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( h(<'clientKey', nc, ~ns.2, PRF(<~pms.2, nc, ~ns.2>)>)
                     ) @ #vk.27 )
                case c_h
                solve( !KU( PRF(<~pms.2, nc, ~ns.2>) ) @ #vk.50 )
                  case C_2
                  by contradiction /* cyclic */
                next
                  case S_2
                  by contradiction /* cyclic */
                next
                  case c_PRF
                  solve( !KU( ~pms.2 ) @ #vk.52 )
                    case C_2
                    solve( !KU( ~ltkA.4 ) @ #vk.63 )
                      case Reveal_ltk
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( ~pms.2 ) @ #vk.22 )
              case C_2
              solve( !KU( ~ltkA.3 ) @ #vk.30 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltkA ) @ #vk.13 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma session_key_setup_possible:
  exists-trace
  "(∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)) ∧
   (∃ S C keyS keyC #k.
     ((SessionKeys( S, C, keyS, keyC ) @ #k) ∧ (¬(∃ #r. RevLtk( S ) @ #r))) ∧
     (¬(∃ #r. RevLtk( C ) @ #r)))"
/*
guarded formula characterizing all satisfying traces:
"(∀ x y #i. (Eq( x, y ) @ #i) ⇒ x = y) ∧
 (∃ S C keyS keyC #k.
   (SessionKeys( S, C, keyS, keyC ) @ #k)
  ∧
   (∀ #r. (RevLtk( S ) @ #r) ⇒ ⊥) ∧ (∀ #r. (RevLtk( C ) @ #r) ⇒ ⊥))"
*/
simplify
solve( SessionKeys( S, C, keyS, keyC ) @ #k )
  case C_3
  solve( St_C_2( S.1, C.1, sid, nc, pc, ns, ps, pms ) ▶₀ #k )
    case C_2
    solve( !KU( senc(<'4', ~sid.1, PRF(<~pms.1, ~nc.1, ns>), ~nc.1, $pc.1, 
                      $C.2, ns, ps, $A>,
                     h(<'serverKey', ~nc.1, ns, PRF(<~pms.1, ~nc.1, ns>)>))
           ) @ #vk )
      case S_2
      solve( !KU( sign(<'32', h(<'32', ~ns.1, $A, ~pms.1>)>, ~ltkA.3)
             ) @ #vk.11 )
        case C_2
        solve( !KU( aenc(<'31', ~pms.1>, pk(~ltkA.2)) ) @ #vk.9 )
          case C_2
          solve( !KU( ~sid.3 ) @ #vk.32 )
            case C_1
            solve( !KU( ~nc.4 ) @ #vk.16 )
              case C_1
              solve( !KU( ~ns.1 ) @ #vk.30 )
                case S_1
                solve( !KU( senc(<'33', ~sid.4, PRF(<~pms.1, ~nc.4, ~ns.1>), ~nc.4, 
                                  $pc.5, $C.7, ~ns.1, $ps.4, $S.2>,
                                 h(<'clientKey', ~nc.4, ~ns.1, PRF(<~pms.1, ~nc.4, ~ns.1>)>))
                       ) @ #vk.12 )
                  case C_2
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed



























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/classic/TLS_Handshake.spthy

  output:          examples/classic/TLS_Handshake.spthy.tmp
  processing time: 2.89s
  
  session_key_secrecy (all-traces): verified (95 steps)
  injective_agree (all-traces): verified (44 steps)
  session_key_setup_possible (exists-trace): verified (11 steps)

==============================================================================
*/
