theory Chen_Kudla begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, bilinear-pairing
functions: fst/1, h/1, hp/1, kdf/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2







section{* A variant of the Chen-Kudla protocol that uses ordered concatenation instead 
          addition of points *}

rule (modulo E) KGC_Setup:
   [ Fr( ~msk ) ]
  --[ KGCSetup( ) ]->
   [ !MSK( ~msk ), !MPK( pmult(~msk, 'P') ), Out( pmult(~msk, 'P') ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) KGC_request:
   [ !MSK( ~msk ) ] --> [ !LTK( $ID, pmult(~msk, hp($ID)) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !LTK( $ID, skID ) ] --[ LtkRev( $ID ) ]-> [ Out( skID ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_master_key:
   [ !MSK( ~msk ) ] --[ MskRev( ) ]-> [ Out( ~msk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_session_key:
   [ !Sessk( ~ey, kdf(sek) ) ] --[ SesskRev( ~ey ) ]-> [ Out( kdf(sek) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ephemeral_key:
   [ !Ephk( ~ex ) ] --[ EphkRev( ~ex ) ]-> [ Out( ~ex ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ex ) ]
  -->
   [ Init( ~ex, $A, $B ), Out( pmult(~ex, 'P') ), !Ephk( ~ex ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init( ~ex, $A, $B ), !MPK( pmult(~s2, 'P') ),
   !LTK( $A, pmult(~s1, hp($A)) ), In( Y )
   ]
  --[
  Accept( ~ex, $A, $B,
          kdf(<em(hp($B), pmult(~s2, 'P'))^~ex, em(Y, pmult(~s1, hp($A))), 
               pmult(~ex, Y), $A, $B, pmult(~ex, 'P'), Y>)
  ),
  Sid( ~ex, <'Init', $A, $B, pmult(~ex, 'P'), Y> ),
  Match( ~ex, <'Resp', $B, $A, pmult(~ex, 'P'), Y> )
  ]->
   [
   !Sessk( ~ex,
           kdf(<em(hp($B), pmult(~s2, 'P'))^~ex, em(Y, pmult(~s1, hp($A))), 
                pmult(~ex, Y), $A, $B, pmult(~ex, 'P'), Y>)
   )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init( ~ex, $A, $B ), !MPK( pmult(~x.1, 'P') ),
     !LTK( $A, pmult(~x, hp($A)) ), In( Y )
     ]
    --[
    Accept( ~ex, $A, $B,
            kdf(<em('P', hp($B))^(~ex*~x.1), z, z.1, $A, $B, pmult(~ex, 'P'), Y>)
    ),
    Sid( ~ex, <'Init', $A, $B, pmult(~ex, 'P'), Y> ),
    Match( ~ex, <'Resp', $B, $A, pmult(~ex, 'P'), Y> )
    ]->
     [
     !Sessk( ~ex,
             kdf(<em('P', hp($B))^(~ex*~x.1), z, z.1, $A, $B, pmult(~ex, 'P'), Y>)
     )
     ]
    variants (modulo AC)
     1. $A    = $A.3
        ~ex   = ~ex.3
        ~x    = ~s1.1
        Y     = Y.3
        z     = em(Y.3, hp($A.3))^~s1.1
        z.1   = pmult(~ex.3, Y.3)
    
     2. $A    = $A.3
        ~ex   = ~ex.3
        ~x    = ~s1.1
        Y     = pmult(x.20, x.21)
        z     = em(x.21, hp($A.3))^(~s1.1*x.20)
        z.1   = pmult((~ex.3*x.20), x.21)
    
     3. $A    = $A.3
        ~ex   = ~ex.3
        ~x    = ~x.21
        Y     = pmult(inv(~x.21), x.23)
        z     = em(x.23, hp($A.3))
        z.1   = pmult((~ex.3*inv(~x.21)), x.23)
    
     4. $A    = $A.3
        ~ex   = ~ex.3
        ~x    = ~x.22
        Y     = pmult(inv((~x.22*x.24)), x.25)
        z     = em(x.25, hp($A.3))^inv(x.24)
        z.1   = pmult((~ex.3*inv((~x.22*x.24))), x.25)
    
     5. $A    = $A.3
        ~ex   = ~ex.3
        ~x    = ~x.22
        Y     = pmult((x.24*inv(~x.22)), x.25)
        z     = em(x.25, hp($A.3))^x.24
        z.1   = pmult((~ex.3*x.24*inv(~x.22)), x.25)
    
     6. $A    = $A.3
        ~ex   = ~ex.3
        ~x    = ~x.23
        Y     = pmult((x.25*inv((~x.23*x.26))), x.27)
        z     = em(x.27, hp($A.3))^(x.25*inv(x.26))
        z.1   = pmult((~ex.3*x.25*inv((~x.23*x.26))), x.27)
    
     7. $A    = $A.3
        ~ex   = ~x.21
        ~x    = ~x.21
        Y     = pmult(inv(~x.21), x.23)
        z     = em(x.23, hp($A.3))
        z.1   = x.23
    
     8. $A    = $A.3
        ~ex   = ~x.22
        ~x    = ~s1.1
        Y     = pmult(inv(~x.22), x.25)
        z     = em(x.25, hp($A.3))^(~s1.1*inv(~x.22))
        z.1   = x.25
    
     9. $A    = $A.3
        ~ex   = ~x.22
        ~x    = ~x.23
        Y     = pmult(inv((~x.22*~x.23)), x.25)
        z     = em(x.25, hp($A.3))^inv(~x.22)
        z.1   = pmult(inv(~x.23), x.25)
    
    10. $A    = $A.3
        ~ex   = ~x.22
        ~x    = ~x.22
        Y     = pmult(inv((~x.22*x.24)), x.25)
        z     = em(x.25, hp($A.3))^inv(x.24)
        z.1   = pmult(inv(x.24), x.25)
    
    11. $A    = $A.3
        ~ex   = ~x.22
        ~x    = ~x.22
        Y     = pmult((x.24*inv(~x.22)), x.25)
        z     = em(x.25, hp($A.3))^x.24
        z.1   = pmult(x.24, x.25)
    
    12. $A    = $A.3
        ~ex   = ~x.23
        ~x    = ~x.24
        Y     = pmult(inv((~x.23*~x.24*x.26)), x.27)
        z     = em(x.27, hp($A.3))^inv((~x.23*x.26))
        z.1   = pmult(inv((~x.24*x.26)), x.27)
    
    13. $A    = $A.3
        ~ex   = ~x.23
        ~x    = ~s1.1
        Y     = pmult(inv((~x.23*x.26)), x.27)
        z     = em(x.27, hp($A.3))^(~s1.1*inv((~x.23*x.26)))
        z.1   = pmult(inv(x.26), x.27)
    
    14. $A    = $A.3
        ~ex   = ~x.23
        ~x    = ~x.23
        Y     = pmult((x.25*inv((~x.23*x.26))), x.27)
        z     = em(x.27, hp($A.3))^(x.25*inv(x.26))
        z.1   = pmult((x.25*inv(x.26)), x.27)
    
    15. $A    = $A.3
        ~ex   = ~x.23
        ~x    = ~s1.1
        Y     = pmult((x.26*inv(~x.23)), x.27)
        z     = em(x.27, hp($A.3))^(~s1.1*x.26*inv(~x.23))
        z.1   = pmult(x.26, x.27)
    
    16. $A    = $A.3
        ~ex   = ~x.23
        ~x    = ~x.24
        Y     = pmult((x.26*inv((~x.23*~x.24))), x.27)
        z     = em(x.27, hp($A.3))^(x.26*inv(~x.23))
        z.1   = pmult((x.26*inv(~x.24)), x.27)
    
    17. $A    = $A.3
        ~ex   = ~x.24
        ~x    = ~x.25
        Y     = pmult((x.27*inv((~x.24*~x.25*x.28))), x.29)
        z     = em(x.29, hp($A.3))^(x.27*inv((~x.24*x.28)))
        z.1   = pmult((x.27*inv((~x.25*x.28))), x.29)
    
    18. $A    = $A.3
        ~ex   = ~x.24
        ~x    = ~s1.1
        Y     = pmult((x.27*inv((~x.24*x.28))), x.29)
        z     = em(x.29, hp($A.3))^(~s1.1*x.27*inv((~x.24*x.28)))
        z.1   = pmult((x.27*inv(x.28)), x.29)
  */

rule (modulo E) Resp_1:
   [
   Fr( ~ey ), !LTK( $B, pmult(~msk, hp($B)) ), !MPK( pmult(~msk, 'P') ),
   In( X )
   ]
  --[
  Accept( ~ey, $B, $A,
          kdf(<em(X, pmult(~msk, hp($B))), em(hp($A), pmult(~msk, 'P'))^~ey, 
               pmult(~ey, X), $A, $B, X, pmult(~ey, 'P')>)
  ),
  Sid( ~ey, <'Resp', $B, $A, X, pmult(~ey, 'P')> ),
  Match( ~ey, <'Init', $A, $B, X, pmult(~ey, 'P')> )
  ]->
   [
   Out( pmult(~ey, 'P') ),
   !Sessk( ~ey,
           kdf(<em(X, pmult(~msk, hp($B))), em(hp($A), pmult(~msk, 'P'))^~ey, 
                pmult(~ey, X), $A, $B, X, pmult(~ey, 'P')>)
   ),
   !Ephk( ~ey )
   ]

  /*
  rule (modulo AC) Resp_1:
     [
     Fr( ~ey ), !LTK( $B, pmult(~x, hp($B)) ), !MPK( pmult(~x, 'P') ), In( X )
     ]
    --[
    Accept( ~ey, $B, $A,
            kdf(<z, em('P', hp($A))^(~x.1*~x.2), z.1, $A, $B, X, pmult(~ey, 'P')>)
    ),
    Sid( ~ey, <'Resp', $B, $A, X, pmult(~ey, 'P')> ),
    Match( ~ey, <'Init', $A, $B, X, pmult(~ey, 'P')> )
    ]->
     [
     Out( pmult(~ey, 'P') ),
     !Sessk( ~ey,
             kdf(<z, em('P', hp($A))^(~x.1*~x.2), z.1, $A, $B, X, pmult(~ey, 'P')>)
     ),
     !Ephk( ~ey )
     ]
    variants (modulo AC)
     1. $B    = $B.3
        ~ey   = ~ey.3
        ~x    = ~msk.1
        X     = X.3
        z     = em(X.3, hp($B.3))^~msk.1
        ~x.1  = ~msk.1
        z.1   = pmult(~ey.3, X.3)
        ~x.2  = ~ey.3
    
     2. $B    = $B.3
        ~ey   = ~ey.3
        ~x    = ~msk.1
        X     = pmult(x.22, x.23)
        z     = em(x.23, hp($B.3))^(~msk.1*x.22)
        ~x.1  = ~msk.1
        z.1   = pmult((~ey.3*x.22), x.23)
        ~x.2  = ~ey.3
    
     3. $B    = $B.3
        ~ey   = ~ey.3
        ~x    = ~x.22
        X     = pmult(inv(~x.22), x.23)
        z     = em(x.23, hp($B.3))
        ~x.1  = ~ey.3
        z.1   = pmult((~ey.3*inv(~x.22)), x.23)
        ~x.2  = ~x.22
    
     4. $B    = $B.3
        ~ey   = ~ey.3
        ~x    = ~x.23
        X     = pmult(inv((~x.23*x.24)), x.25)
        z     = em(x.25, hp($B.3))^inv(x.24)
        ~x.1  = ~ey.3
        z.1   = pmult((~ey.3*inv((~x.23*x.24))), x.25)
        ~x.2  = ~x.23
    
     5. $B    = $B.3
        ~ey   = ~ey.3
        ~x    = ~x.23
        X     = pmult((x.24*inv(~x.23)), x.25)
        z     = em(x.25, hp($B.3))^x.24
        ~x.1  = ~ey.3
        z.1   = pmult((~ey.3*x.24*inv(~x.23)), x.25)
        ~x.2  = ~x.23
    
     6. $B    = $B.3
        ~ey   = ~ey.3
        ~x    = ~x.24
        X     = pmult((x.25*inv((~x.24*x.26))), x.27)
        z     = em(x.27, hp($B.3))^(x.25*inv(x.26))
        ~x.1  = ~ey.3
        z.1   = pmult((~ey.3*x.25*inv((~x.24*x.26))), x.27)
        ~x.2  = ~x.24
    
     7. $B    = $B.3
        ~ey   = ~x.22
        ~x    = ~x.22
        X     = pmult(inv(~x.22), x.23)
        z     = em(x.23, hp($B.3))
        ~x.1  = ~x.22
        z.1   = x.23
        ~x.2  = ~x.22
    
     8. $B    = $B.3
        ~ey   = ~x.23
        ~x    = ~msk.1
        X     = pmult(inv(~x.23), x.25)
        z     = em(x.25, hp($B.3))^(~msk.1*inv(~x.23))
        ~x.1  = ~msk.1
        z.1   = x.25
        ~x.2  = ~x.23
    
     9. $B    = $B.3
        ~ey   = ~x.23
        ~x    = ~x.24
        X     = pmult(inv((~x.23*~x.24)), x.25)
        z     = em(x.25, hp($B.3))^inv(~x.23)
        ~x.1  = ~x.23
        z.1   = pmult(inv(~x.24), x.25)
        ~x.2  = ~x.24
    
    10. $B    = $B.3
        ~ey   = ~x.23
        ~x    = ~x.23
        X     = pmult(inv((~x.23*x.24)), x.25)
        z     = em(x.25, hp($B.3))^inv(x.24)
        ~x.1  = ~x.23
        z.1   = pmult(inv(x.24), x.25)
        ~x.2  = ~x.23
    
    11. $B    = $B.3
        ~ey   = ~x.23
        ~x    = ~x.23
        X     = pmult((x.24*inv(~x.23)), x.25)
        z     = em(x.25, hp($B.3))^x.24
        ~x.1  = ~x.23
        z.1   = pmult(x.24, x.25)
        ~x.2  = ~x.23
    
    12. $B    = $B.3
        ~ey   = ~x.24
        ~x    = ~x.25
        X     = pmult(inv((~x.24*~x.25*x.26)), x.27)
        z     = em(x.27, hp($B.3))^inv((~x.24*x.26))
        ~x.1  = ~x.24
        z.1   = pmult(inv((~x.25*x.26)), x.27)
        ~x.2  = ~x.25
    
    13. $B    = $B.3
        ~ey   = ~x.24
        ~x    = ~msk.1
        X     = pmult(inv((~x.24*x.26)), x.27)
        z     = em(x.27, hp($B.3))^(~msk.1*inv((~x.24*x.26)))
        ~x.1  = ~msk.1
        z.1   = pmult(inv(x.26), x.27)
        ~x.2  = ~x.24
    
    14. $B    = $B.3
        ~ey   = ~x.24
        ~x    = ~x.24
        X     = pmult((x.25*inv((~x.24*x.26))), x.27)
        z     = em(x.27, hp($B.3))^(x.25*inv(x.26))
        ~x.1  = ~x.24
        z.1   = pmult((x.25*inv(x.26)), x.27)
        ~x.2  = ~x.24
    
    15. $B    = $B.3
        ~ey   = ~x.24
        ~x    = ~msk.1
        X     = pmult((x.26*inv(~x.24)), x.27)
        z     = em(x.27, hp($B.3))^(~msk.1*x.26*inv(~x.24))
        ~x.1  = ~msk.1
        z.1   = pmult(x.26, x.27)
        ~x.2  = ~x.24
    
    16. $B    = $B.3
        ~ey   = ~x.24
        ~x    = ~x.25
        X     = pmult((x.26*inv((~x.24*~x.25))), x.27)
        z     = em(x.27, hp($B.3))^(x.26*inv(~x.24))
        ~x.1  = ~x.24
        z.1   = pmult((x.26*inv(~x.25)), x.27)
        ~x.2  = ~x.25
    
    17. $B    = $B.3
        ~ey   = ~x.25
        ~x    = ~x.26
        X     = pmult((x.27*inv((~x.25*~x.26*x.28))), x.29)
        z     = em(x.29, hp($B.3))^(x.27*inv((~x.25*x.28)))
        ~x.1  = ~x.25
        z.1   = pmult((x.27*inv((~x.26*x.28))), x.29)
        ~x.2  = ~x.26
    
    18. $B    = $B.3
        ~ey   = ~x.25
        ~x    = ~msk.1
        X     = pmult((x.27*inv((~x.25*x.28))), x.29)
        z     = em(x.29, hp($B.3))^(~msk.1*x.27*inv((~x.25*x.28)))
        ~x.1  = ~msk.1
        z.1   = pmult((x.27*inv(x.28)), x.29)
        ~x.2  = ~x.25
  */

lemma key_secrecy_eCK_like:
  all-traces
  "∀ #i1 #i2 test A B k.
    ((Accept( test, A, B, k ) @ #i1) ∧ (K( k ) @ #i2)) ⇒
    ((((∃ #i3. SesskRev( test ) @ #i3) ∨
       (∃ #i3 #i4.
         ((KGCSetup( ) @ #i3) ∧ (KGCSetup( ) @ #i4)) ∧ (¬(#i3 = #i4)))) ∨
      (∃ matching #i3 #i4 sid.
        ((Sid( matching, sid ) @ #i3) ∧ (Match( test, sid ) @ #i4)) ∧
        (((∃ #i5. SesskRev( matching ) @ #i5) ∨
          (((∃ #i5. LtkRev( B ) @ #i5) ∨ (∃ #i5. MskRev( ) @ #i5)) ∧
           (∃ #i5. EphkRev( matching ) @ #i5))) ∨
         (((∃ #i5. LtkRev( A ) @ #i5) ∨ (∃ #i5. MskRev( ) @ #i5)) ∧
          (∃ #i5. EphkRev( test ) @ #i5))))) ∨
     ((¬(∃ matching #i3 #i4 sid.
          (Sid( matching, sid ) @ #i3) ∧ (Match( test, sid ) @ #i4))) ∧
      (((∃ #i5. LtkRev( B ) @ #i5) ∨ (∃ #i3. EphkRev( test ) @ #i3)) ∨
       (∃ #i3. MskRev( ) @ #i3))))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 test A B k.
  (Accept( test, A, B, k ) @ #i1) ∧ (K( k ) @ #i2)
 ∧
  (∀ #i3. (SesskRev( test ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3 #i4. (KGCSetup( ) @ #i3) ∧ (KGCSetup( ) @ #i4) ⇒ #i3 = #i4) ∧
  (∀ matching #i3 #i4 sid.
    (Sid( matching, sid ) @ #i3) ∧ (Match( test, sid ) @ #i4)
   ⇒
    (∀ #i5. (SesskRev( matching ) @ #i5) ⇒ ⊥) ∧
    ((((∀ #i5. (LtkRev( B ) @ #i5) ⇒ ⊥) ∧ (∀ #i5. (MskRev( ) @ #i5) ⇒ ⊥)) ∨
      (∀ #i5. (EphkRev( matching ) @ #i5) ⇒ ⊥))) ∧
    ((((∀ #i5. (LtkRev( A ) @ #i5) ⇒ ⊥) ∧ (∀ #i5. (MskRev( ) @ #i5) ⇒ ⊥)) ∨
      (∀ #i5. (EphkRev( test ) @ #i5) ⇒ ⊥)))) ∧
  (((∃ matching #i3 #i4 sid.
      (Sid( matching, sid ) @ #i3) ∧ (Match( test, sid ) @ #i4)) ∨
    ((∀ #i5. (LtkRev( B ) @ #i5) ⇒ ⊥) ∧
     (∀ #i3. (EphkRev( test ) @ #i3) ⇒ ⊥) ∧
     (∀ #i3. (MskRev( ) @ #i3) ⇒ ⊥))))"
*/
simplify
solve( (∃ matching #i3 #i4 sid.
         (Sid( matching, sid ) @ #i3) ∧ (Match( test, sid ) @ #i4))  ∥
       ((∀ #i5. (LtkRev( B ) @ #i5) ⇒ ⊥) ∧
        (∀ #i3. (EphkRev( test ) @ #i3) ⇒ ⊥) ∧
        (∀ #i3. (MskRev( ) @ #i3) ⇒ ⊥)) )
  case case_1
  solve( ((∀ #i5. (LtkRev( B ) @ #i5) ⇒ ⊥) ∧
          (∀ #i5. (MskRev( ) @ #i5) ⇒ ⊥))  ∥
         (∀ #i5. (EphkRev( matching ) @ #i5) ⇒ ⊥) )
    case case_1
    solve( ((∀ #i5. (LtkRev( A ) @ #i5) ⇒ ⊥) ∧
            (∀ #i5. (MskRev( ) @ #i5) ⇒ ⊥))  ∥
           (∀ #i5. (EphkRev( test ) @ #i5) ⇒ ⊥) )
      case case_1
      solve( Accept( test, A, B, x ) @ #i1 )
        case Init_2
        solve( Init( ~ex, $A.1, $B.1 ) ▶₀ #i1 )
          case Init_1
          solve( !MPK( pmult(~x.2, 'P') ) ▶₁ #i1 )
            case KGC_Setup
            solve( !LTK( $A.1, pmult(~x.1, hp($A.1)) ) ▶₂ #i1 )
              case KGC_request
              solve( Sid( matching, sid ) @ #i3 )
                case Resp_1
                solve( !LTK( $B.2, pmult(~x.3, hp($B.2)) ) ▶₁ #i3 )
                  case KGC_request
                  solve( !MPK( pmult(~x.3, 'P') ) ▶₂ #i3 )
                    case KGC_Setup
                    solve( Match( ~ex, <'Resp', $B.2, $A.2, X, pmult(~ey, 'P')> ) @ #i4 )
                      case Init_2
                      solve( Init( ~ex.3, $A.4, $B.4 ) ▶₀ #i4 )
                        case Init_1
                        solve( !KU( kdf(<em('P', hp($B.4))^(~ex.3*~x.8), 
                                         em('P', hp($A.4))^(~ey.2*~x.8), pmult((~ey.2*~ex.3), 'P'), $A.4, 
                                         $B.4, pmult(~ex.3, 'P'), pmult(~ey.2, 'P')>)
                               ) @ #vk )
                          case c_kdf
                          solve( !KU( em('P', hp($B.4))^(~ex.3*~x.8) ) @ #vk.5 )
                            case KGC_Setup
                            solve( !KU( ~ex.4 ) @ #vk.18 )
                              case Reveal_ephemeral_key
                              solve( !KU( em('P', hp($A.5))^(~msk*~ey.2) ) @ #vk.7 )
                                case KGC_Setup
                                solve( !KU( ~ey.3 ) @ #vk.20 )
                                  case Reveal_ephemeral_key
                                  solve( !KU( pmult((~ex.4*~ey.4), 'P') ) @ #vk.9 )
                                    case Init_1
                                    solve( !KU( hp($B.8) ) @ #vk.17 )
                                      case c_hp
                                      solve( !KU( hp($A.8) ) @ #vk.19 )
                                        case c_hp
                                        solve( !KU( pmult(~ex.5, 'P') ) @ #vk.21 )
                                          case Init_1
                                          solve( !KU( pmult(~x.16, 'P') ) @ #vk.16 )
                                            case Resp_1
                                            SOLVED // trace found
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed













/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Reveal_session_key: 
Failed to derive Variable(s): sek

Rule Init_2: 
Failed to derive Variable(s): ~s1, ~s2

Rule Resp_1: 
Failed to derive Variable(s): ~msk
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/ake/bilinear/Chen_Kudla_eCK.spthy

  output:          examples/ake/bilinear/Chen_Kudla_eCK.spthy.tmp
  processing time: 20.70s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  key_secrecy_eCK_like (all-traces): falsified - found trace (24 steps)

==============================================================================
*/
