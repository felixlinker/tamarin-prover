theory Joux begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, bilinear-pairing, multiset
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true





section{* The Joux Protocol using Signatures*}







rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltk ) ] --[ LtkReveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Proto1:
   [ Fr( ~ekA ), !Ltk( $A, ltkA ) ]
  -->
   [
   PState( $A, ($B++$C), ~ekA ),
   Out( <pmult(~ekA, 'P'), sign(<$A, ($B++$C), pmult(~ekA, 'P')>, ltkA)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Proto2:
   [
   PState( $A, ($B++$C), ~ekA ), !Pk( $B, pk(ltkB) ), !Pk( $C, pk(ltkC) ),
   In( <XB, sign(<$B, ($A++$C), XB>, ltkB)> ),
   In( <XC, sign(<$C, ($A++$B), XC>, ltkC)> )
   ]
  --[ SessionKey( $A, ($B++$C), em(XB, XC)^~ekA ) ]->
   [ ]

  /*
  rule (modulo AC) Proto2:
     [
     PState( $A, ($B++$C), ~ekA ), !Pk( $B, pk(ltkB) ), !Pk( $C, pk(ltkC) ),
     In( <XB, sign(<$B, ($A++$C), XB>, ltkB)> ),
     In( <XC, sign(<$C, ($A++$B), XC>, ltkC)> )
     ]
    --[ SessionKey( $A, ($B++$C), z ) ]->
     [ ]
    variants (modulo AC)
      1. ~ekA  = ~ekA.2
         XB    = XB.2
         XC    = pmult(x, x.1)
         z     = em(x.1, XB.2)^(x*~ekA.2)
    
      2. ~ekA  = ~ekA.2
         XB    = pmult(x, x.1)
         XC    = XC.2
         z     = em(x.1, XC.2)^(x*~ekA.2)
    
      3. ~ekA  = ~ekA.2
         XB    = pmult(x, x.1)
         XC    = pmult(inv(x), x.2)
         z     = em(x.1, x.2)^~ekA.2
    
      4. ~ekA  = ~ekA.2
         XB    = pmult(inv(x), x.1)
         XC    = pmult(x, x.2)
         z     = em(x.1, x.2)^~ekA.2
    
      5. ~ekA  = ~x
         XB    = pmult(inv(~x), x.1)
         XC    = pmult(x.2, x.3)
         z     = em(x.1, x.3)^x.2
    
      6. ~ekA  = ~ekA.2
         XB    = pmult(x, x.1)
         XC    = pmult(x.2, x.3)
         z     = em(x.1, x.3)^(x*~ekA.2*x.2)
    
      7. ~ekA  = ~ekA.2
         XB    = pmult(x, x.1)
         XC    = pmult((x.2*inv(x)), x.3)
         z     = em(x.1, x.3)^(~ekA.2*x.2)
    
      8. ~ekA  = ~ekA.2
         XB    = pmult(inv(x), x.1)
         XC    = pmult((x*x.2), x.3)
         z     = em(x.1, x.3)^(~ekA.2*x.2)
    
      9. ~ekA  = ~ekA.2
         XB    = pmult(x, x.1)
         XC    = pmult(inv((x*x.2)), x.3)
         z     = em(x.1, x.3)^(~ekA.2*inv(x.2))
    
     10. ~ekA  = ~ekA.2
         XB    = pmult(inv(x), x.1)
         XC    = pmult(inv(x.2), x.3)
         z     = em(x.1, x.3)^(~ekA.2*inv((x*x.2)))
    
     11. ~ekA  = ~ekA.2
         XB    = pmult(x, x.1)
         XC    = pmult((x.2*inv((x*x.3))), x.4)
         z     = em(x.1, x.4)^(~ekA.2*x.2*inv(x.3))
    
     12. ~ekA  = ~ekA.2
         XB    = pmult(inv(x), x.1)
         XC    = pmult((x.2*inv(x.3)), x.4)
         z     = em(x.1, x.4)^(~ekA.2*x.2*inv((x*x.3)))
    
     13. ~ekA  = ~ekA.2
         XB    = XB.2
         XC    = XC.2
         z     = em(XB.2, XC.2)^~ekA.2
    
     14. ~ekA  = ~x
         XB    = XB.2
         XC    = pmult((x.2*inv(~x)), x.3)
         z     = em(XB.2, x.3)^x.2
    
     15. ~ekA  = ~x
         XB    = XB.2
         XC    = pmult(inv((~x*x.2)), x.3)
         z     = em(XB.2, x.3)^inv(x.2)
    
     16. ~ekA  = ~x
         XB    = XB.2
         XC    = pmult((x.2*inv((~x*x.3))), x.4)
         z     = em(XB.2, x.4)^(x.2*inv(x.3))
    
     17. ~ekA  = ~x
         XB    = pmult((x.1*inv(~x)), x.2)
         XC    = XC.2
         z     = em(XC.2, x.2)^x.1
    
     18. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1)), x.2)
         XC    = XC.2
         z     = em(XC.2, x.2)^inv(x.1)
    
     19. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = XC.2
         z     = em(XC.2, x.3)^(x.1*inv(x.2))
    
     20. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult(inv(~x), x.3)
         z     = em(x.2, x.3)^x.1
    
     21. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult((x.1*inv(x)), x.3)
         z     = em(x.2, x.3)^~ekA.2
    
     22. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult(x.1, x.3)
         z     = em(x.2, x.3)^(x*~ekA.2)
    
     23. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1), x.2)
         XC    = pmult(inv(x), x.3)
         z     = em(x.2, x.3)^(x.1*~ekA.2)
    
     24. ~ekA  = ~ekA.2
         XB    = pmult(inv((x*x.1)), x.2)
         XC    = pmult(x.1, x.3)
         z     = em(x.2, x.3)^(~ekA.2*inv(x))
    
     25. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult((x.3*inv((~x*x.1))), x.4)
         z     = em(x.2, x.4)^x.3
    
     26. ~ekA  = ~x
         XB    = pmult(inv(x.1), x.2)
         XC    = pmult((x.1*x.3*inv(~x)), x.4)
         z     = em(x.2, x.4)^x.3
    
     27. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1)), x.2)
         XC    = pmult((x.1*x.3), x.4)
         z     = em(x.2, x.4)^x.3
    
     28. ~ekA  = ~x
         XB    = pmult((x.1*inv(~x)), x.2)
         XC    = pmult((x.3*inv(x.1)), x.4)
         z     = em(x.2, x.4)^x.3
    
     29. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult(inv((~x*x.1*x.3)), x.4)
         z     = em(x.2, x.4)^inv(x.3)
    
     30. ~ekA  = ~x
         XB    = pmult(inv(x.1), x.2)
         XC    = pmult((x.1*inv((~x*x.3))), x.4)
         z     = em(x.2, x.4)^inv(x.3)
    
     31. ~ekA  = ~x
         XB    = pmult((x.1*inv(~x)), x.2)
         XC    = pmult(inv((x.1*x.3)), x.4)
         z     = em(x.2, x.4)^inv(x.3)
    
     32. ~ekA  = ~x
         XB    = pmult(inv(x.1), x.2)
         XC    = pmult(inv((~x*x.3)), x.4)
         z     = em(x.2, x.4)^inv((x.1*x.3))
    
     33. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1)), x.2)
         XC    = pmult(inv(x.3), x.4)
         z     = em(x.2, x.4)^inv((x.1*x.3))
    
     34. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult((x.1*x.3), x.4)
         z     = em(x.2, x.4)^(x*~ekA.2*x.3)
    
     35. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult(inv(x.3), x.4)
         z     = em(x.2, x.4)^(x*~ekA.2*inv((x.1*x.3)))
    
     36. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1), x.2)
         XC    = pmult((x.3*inv(x)), x.4)
         z     = em(x.2, x.4)^(x.1*~ekA.2*x.3)
    
     37. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1), x.2)
         XC    = pmult(inv((x*x.3)), x.4)
         z     = em(x.2, x.4)^(x.1*~ekA.2*inv(x.3))
    
     38. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult((x.3*inv(~x)), x.4)
         z     = em(x.2, x.4)^(x.1*x.3)
    
     39. ~ekA  = ~x
         XB    = pmult((x.1*inv(~x)), x.2)
         XC    = pmult(x.3, x.4)
         z     = em(x.2, x.4)^(x.1*x.3)
    
     40. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult(inv((~x*x.3)), x.4)
         z     = em(x.2, x.4)^(x.1*inv(x.3))
    
     41. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult((x.1*x.3*inv(x)), x.4)
         z     = em(x.2, x.4)^(~ekA.2*x.3)
    
     42. ~ekA  = ~ekA.2
         XB    = pmult(inv((x*x.1)), x.2)
         XC    = pmult((x*x.3), x.4)
         z     = em(x.2, x.4)^(~ekA.2*x.3*inv(x.1))
    
     43. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult((x.1*inv((x*x.3))), x.4)
         z     = em(x.2, x.4)^(~ekA.2*inv(x.3))
    
     44. ~ekA  = ~ekA.2
         XB    = pmult(inv((x*x.1)), x.2)
         XC    = pmult((x*inv(x.3)), x.4)
         z     = em(x.2, x.4)^(~ekA.2*inv((x.1*x.3)))
    
     45. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult(inv((x*x.3)), x.4)
         z     = em(x.2, x.4)^(~ekA.2*inv((x.1*x.3)))
    
     46. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1)), x.2)
         XC    = pmult(x.3, x.4)
         z     = em(x.2, x.4)^(x.3*inv(x.1))
    
     47. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult((x.3*inv(x.4)), x.5)
         z     = em(x.2, x.5)^(x*~ekA.2*x.3*inv((x.1*x.4)))
    
     48. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1), x.2)
         XC    = pmult((x.3*inv((x*x.4))), x.5)
         z     = em(x.2, x.5)^(x.1*~ekA.2*x.3*inv(x.4))
    
     49. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult((x.3*inv((~x*x.4))), x.5)
         z     = em(x.2, x.5)^(x.1*x.3*inv(x.4))
    
     50. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult((x.1*x.3*inv((x*x.4))), x.5)
         z     = em(x.2, x.5)^(~ekA.2*x.3*inv(x.4))
    
     51. ~ekA  = ~ekA.2
         XB    = pmult(inv((x*x.1)), x.2)
         XC    = pmult((x*x.3*inv(x.4)), x.5)
         z     = em(x.2, x.5)^(~ekA.2*x.3*inv((x.1*x.4)))
    
     52. ~ekA  = ~ekA.2
         XB    = pmult((x*inv(x.1)), x.2)
         XC    = pmult((x.3*inv((x*x.4))), x.5)
         z     = em(x.2, x.5)^(~ekA.2*x.3*inv((x.1*x.4)))
    
     53. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult((x.3*inv((~x*x.1*x.4))), x.5)
         z     = em(x.2, x.5)^(x.3*inv(x.4))
    
     54. ~ekA  = ~x
         XB    = pmult(inv(x.1), x.2)
         XC    = pmult((x.1*x.3*inv((~x*x.4))), x.5)
         z     = em(x.2, x.5)^(x.3*inv(x.4))
    
     55. ~ekA  = ~x
         XB    = pmult((x.1*inv(~x)), x.2)
         XC    = pmult((x.3*inv((x.1*x.4))), x.5)
         z     = em(x.2, x.5)^(x.3*inv(x.4))
    
     56. ~ekA  = ~x
         XB    = pmult(inv(x.1), x.2)
         XC    = pmult((x.3*inv((~x*x.4))), x.5)
         z     = em(x.2, x.5)^(x.3*inv((x.1*x.4)))
    
     57. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1)), x.2)
         XC    = pmult((x.3*inv(x.4)), x.5)
         z     = em(x.2, x.5)^(x.3*inv((x.1*x.4)))
    
     58. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(~x)), x.3)
         XC    = pmult(inv(x.2), x.4)
         z     = em(x.3, x.4)^x.1
    
     59. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*inv(~x)), x.4)
         z     = em(x.3, x.4)^x.1
    
     60. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult(x.2, x.4)
         z     = em(x.3, x.4)^x.1
    
     61. ~ekA  = ~x
         XB    = pmult((x.1*x.2), x.3)
         XC    = pmult(inv((~x*x.1)), x.4)
         z     = em(x.3, x.4)^x.2
    
     62. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1*x.2)), x.3)
         XC    = pmult(x.2, x.4)
         z     = em(x.3, x.4)^inv(x.1)
    
     63. ~ekA  = ~x
         XB    = pmult(inv((x.1*x.2)), x.3)
         XC    = pmult((x.2*inv(~x)), x.4)
         z     = em(x.3, x.4)^inv(x.1)
    
     64. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult(inv(x.1), x.4)
         z     = em(x.3, x.4)^inv(x.2)
    
     65. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult(x.2, x.4)
         z     = em(x.3, x.4)^(x*~ekA.2*inv(x.1))
    
     66. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*inv(x)), x.4)
         z     = em(x.3, x.4)^(x.1*~ekA.2)
    
     67. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult((x.2*inv(x)), x.4)
         z     = em(x.3, x.4)^(~ekA.2*inv(x.1))
    
     68. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*x.4*inv((~x*x.1))), x.5)
         z     = em(x.3, x.5)^x.4
    
     69. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.2*x.4*inv(x.1)), x.5)
         z     = em(x.3, x.5)^x.4
    
     70. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*inv((~x*x.1*x.4))), x.5)
         z     = em(x.3, x.5)^inv(x.4)
    
     71. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.2*inv((x.1*x.4))), x.5)
         z     = em(x.3, x.5)^inv(x.4)
    
     72. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1*x.2)), x.3)
         XC    = pmult((x.2*inv(x.4)), x.5)
         z     = em(x.3, x.5)^inv((x.1*x.4))
    
     73. ~ekA  = ~x
         XB    = pmult(inv((x.1*x.2)), x.3)
         XC    = pmult((x.1*inv((~x*x.4))), x.5)
         z     = em(x.3, x.5)^inv((x.2*x.4))
    
     74. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult(inv((~x*x.1*x.4)), x.5)
         z     = em(x.3, x.5)^inv((x.2*x.4))
    
     75. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult(inv((x.1*x.4)), x.5)
         z     = em(x.3, x.5)^inv((x.2*x.4))
    
     76. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult((x.1*x.4), x.5)
         z     = em(x.3, x.5)^(x*~ekA.2*x.4*inv(x.2))
    
     77. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult((x.1*inv(x.4)), x.5)
         z     = em(x.3, x.5)^(x*~ekA.2*inv((x.2*x.4)))
    
     78. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*x.4*inv(x)), x.5)
         z     = em(x.3, x.5)^(x.1*~ekA.2*x.4)
    
     79. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*inv((x*x.4))), x.5)
         z     = em(x.3, x.5)^(x.1*~ekA.2*inv(x.4))
    
     80. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv(x.2)), x.3)
         XC    = pmult(inv((x*x.4)), x.5)
         z     = em(x.3, x.5)^(x.1*~ekA.2*inv((x.2*x.4)))
    
     81. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*x.4*inv(~x)), x.5)
         z     = em(x.3, x.5)^(x.1*x.4)
    
     82. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.2*x.4), x.5)
         z     = em(x.3, x.5)^(x.1*x.4)
    
     83. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult(x.4, x.5)
         z     = em(x.3, x.5)^(x.1*x.4*inv(x.2))
    
     84. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*inv((~x*x.4))), x.5)
         z     = em(x.3, x.5)^(x.1*inv(x.4))
    
     85. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult(inv((~x*x.4)), x.5)
         z     = em(x.3, x.5)^(x.1*inv((x.2*x.4)))
    
     86. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult(inv(x.4), x.5)
         z     = em(x.3, x.5)^(x.1*inv((x.2*x.4)))
    
     87. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult((x.1*x.4*inv(x)), x.5)
         z     = em(x.3, x.5)^(~ekA.2*x.4*inv(x.2))
    
     88. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult((x.1*inv((x*x.4))), x.5)
         z     = em(x.3, x.5)^(~ekA.2*inv((x.2*x.4)))
    
     89. ~ekA  = ~x
         XB    = pmult((x.1*x.2), x.3)
         XC    = pmult((x.4*inv((~x*x.1))), x.5)
         z     = em(x.3, x.5)^(x.2*x.4)
    
     90. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(~x)), x.3)
         XC    = pmult((x.4*inv(x.1)), x.5)
         z     = em(x.3, x.5)^(x.2*x.4)
    
     91. ~ekA  = ~x
         XB    = pmult((x.1*x.2), x.3)
         XC    = pmult(inv((~x*x.1*x.4)), x.5)
         z     = em(x.3, x.5)^(x.2*inv(x.4))
    
     92. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(~x)), x.3)
         XC    = pmult(inv((x.1*x.4)), x.5)
         z     = em(x.3, x.5)^(x.2*inv(x.4))
    
     93. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1*x.2)), x.3)
         XC    = pmult((x.2*x.4), x.5)
         z     = em(x.3, x.5)^(x.4*inv(x.1))
    
     94. ~ekA  = ~x
         XB    = pmult(inv((x.1*x.2)), x.3)
         XC    = pmult((x.1*x.4*inv(~x)), x.5)
         z     = em(x.3, x.5)^(x.4*inv(x.2))
    
     95. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.4*inv(x.1)), x.5)
         z     = em(x.3, x.5)^(x.4*inv(x.2))
    
     96. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult((x.1*x.4*inv(x.5)), x.6)
         z     = em(x.3, x.6)^(x*~ekA.2*x.4*inv((x.2*x.5)))
    
     97. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*x.4*inv((x*x.5))), x.6)
         z     = em(x.3, x.6)^(x.1*~ekA.2*x.4*inv(x.5))
    
     98. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv(x.2)), x.3)
         XC    = pmult((x.4*inv((x*x.5))), x.6)
         z     = em(x.3, x.6)^(x.1*~ekA.2*x.4*inv((x.2*x.5)))
    
     99. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*x.4*inv((~x*x.5))), x.6)
         z     = em(x.3, x.6)^(x.1*x.4*inv(x.5))
    
    100. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.4*inv((~x*x.5))), x.6)
         z     = em(x.3, x.6)^(x.1*x.4*inv((x.2*x.5)))
    
    101. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.4*inv(x.5)), x.6)
         z     = em(x.3, x.6)^(x.1*x.4*inv((x.2*x.5)))
    
    102. ~ekA  = ~ekA.2
         XB    = pmult((x*inv((x.1*x.2))), x.3)
         XC    = pmult((x.1*x.4*inv((x*x.5))), x.6)
         z     = em(x.3, x.6)^(~ekA.2*x.4*inv((x.2*x.5)))
    
    103. ~ekA  = ~x
         XB    = pmult((x.1*x.2), x.3)
         XC    = pmult((x.4*inv((~x*x.1*x.5))), x.6)
         z     = em(x.3, x.6)^(x.2*x.4*inv(x.5))
    
    104. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(~x)), x.3)
         XC    = pmult((x.4*inv((x.1*x.5))), x.6)
         z     = em(x.3, x.6)^(x.2*x.4*inv(x.5))
    
    105. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*x.4*inv((~x*x.1*x.5))), x.6)
         z     = em(x.3, x.6)^(x.4*inv(x.5))
    
    106. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.2*x.4*inv((x.1*x.5))), x.6)
         z     = em(x.3, x.6)^(x.4*inv(x.5))
    
    107. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1*x.2)), x.3)
         XC    = pmult((x.2*x.4*inv(x.5)), x.6)
         z     = em(x.3, x.6)^(x.4*inv((x.1*x.5)))
    
    108. ~ekA  = ~x
         XB    = pmult(inv((x.1*x.2)), x.3)
         XC    = pmult((x.1*x.4*inv((~x*x.5))), x.6)
         z     = em(x.3, x.6)^(x.4*inv((x.2*x.5)))
    
    109. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.4*inv((~x*x.1*x.5))), x.6)
         z     = em(x.3, x.6)^(x.4*inv((x.2*x.5)))
    
    110. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.4*inv((x.1*x.5))), x.6)
         z     = em(x.3, x.6)^(x.4*inv((x.2*x.5)))
    
    111. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(x.3)), x.4)
         XC    = pmult((x.3*inv((~x*x.1))), x.5)
         z     = em(x.4, x.5)^x.2
    
    112. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult((x.3*inv(x.1)), x.5)
         z     = em(x.4, x.5)^x.2
    
    113. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult((x.3*inv(x.1)), x.5)
         z     = em(x.4, x.5)^inv(x.2)
    
    114. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.3*inv((~x*x.1))), x.5)
         z     = em(x.4, x.5)^inv(x.2)
    
    115. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.3*inv(x)), x.5)
         z     = em(x.4, x.5)^(x.1*~ekA.2*inv(x.2))
    
    116. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult(x.3, x.5)
         z     = em(x.4, x.5)^(x.1*inv(x.2))
    
    117. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.3*inv(~x)), x.5)
         z     = em(x.4, x.5)^(x.1*inv(x.2))
    
    118. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult(inv(x.2), x.5)
         z     = em(x.4, x.5)^(x.1*inv(x.3))
    
    119. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult((x.2*inv((x.1*x.5))), x.6)
         z     = em(x.4, x.6)^inv((x.3*x.5))
    
    120. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*inv((~x*x.1*x.5))), x.6)
         z     = em(x.4, x.6)^inv((x.3*x.5))
    
    121. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*x.5*inv(x)), x.6)
         z     = em(x.4, x.6)^(x.1*~ekA.2*x.5*inv(x.3))
    
    122. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*inv((x*x.5))), x.6)
         z     = em(x.4, x.6)^(x.1*~ekA.2*inv((x.3*x.5)))
    
    123. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult((x.3*x.5), x.6)
         z     = em(x.4, x.6)^(x.1*x.5*inv(x.2))
    
    124. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*x.5*inv(~x)), x.6)
         z     = em(x.4, x.6)^(x.1*x.5*inv(x.3))
    
    125. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult((x.3*inv(x.5)), x.6)
         z     = em(x.4, x.6)^(x.1*inv((x.2*x.5)))
    
    126. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(x.3)), x.4)
         XC    = pmult(inv((~x*x.2*x.5)), x.6)
         z     = em(x.4, x.6)^(x.1*inv((x.3*x.5)))
    
    127. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*inv((~x*x.5))), x.6)
         z     = em(x.4, x.6)^(x.1*inv((x.3*x.5)))
    
    128. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(x.3)), x.4)
         XC    = pmult((x.3*x.5*inv((~x*x.1))), x.6)
         z     = em(x.4, x.6)^(x.2*x.5)
    
    129. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult((x.3*x.5*inv(x.1)), x.6)
         z     = em(x.4, x.6)^(x.2*x.5)
    
    130. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult((x.5*inv(x.1)), x.6)
         z     = em(x.4, x.6)^(x.2*x.5*inv(x.3))
    
    131. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(x.3)), x.4)
         XC    = pmult((x.3*inv((~x*x.1*x.5))), x.6)
         z     = em(x.4, x.6)^(x.2*inv(x.5))
    
    132. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult((x.3*inv((x.1*x.5))), x.6)
         z     = em(x.4, x.6)^(x.2*inv(x.5))
    
    133. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult(inv((x.1*x.5)), x.6)
         z     = em(x.4, x.6)^(x.2*inv((x.3*x.5)))
    
    134. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult((x.3*x.5*inv(x.1)), x.6)
         z     = em(x.4, x.6)^(x.5*inv(x.2))
    
    135. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*x.5*inv((~x*x.1))), x.6)
         z     = em(x.4, x.6)^(x.5*inv(x.3))
    
    136. ~ekA  = ~ekA.2
         XB    = pmult((x*x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*x.5*inv((x*x.6))), x.7)
         z     = em(x.4, x.7)^(x.1*~ekA.2*x.5*inv((x.3*x.6)))
    
    137. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult((x.3*x.5*inv(x.6)), x.7)
         z     = em(x.4, x.7)^(x.1*x.5*inv((x.2*x.6)))
    
    138. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*x.5*inv((~x*x.6))), x.7)
         z     = em(x.4, x.7)^(x.1*x.5*inv((x.3*x.6)))
    
    139. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(x.3)), x.4)
         XC    = pmult((x.3*x.5*inv((~x*x.1*x.6))), x.7)
         z     = em(x.4, x.7)^(x.2*x.5*inv(x.6))
    
    140. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult((x.3*x.5*inv((x.1*x.6))), x.7)
         z     = em(x.4, x.7)^(x.2*x.5*inv(x.6))
    
    141. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv(x.3)), x.4)
         XC    = pmult((x.5*inv((~x*x.1*x.6))), x.7)
         z     = em(x.4, x.7)^(x.2*x.5*inv((x.3*x.6)))
    
    142. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3))), x.4)
         XC    = pmult((x.5*inv((x.1*x.6))), x.7)
         z     = em(x.4, x.7)^(x.2*x.5*inv((x.3*x.6)))
    
    143. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2*x.3))), x.4)
         XC    = pmult((x.2*x.5*inv((x.1*x.6))), x.7)
         z     = em(x.4, x.7)^(x.5*inv((x.3*x.6)))
    
    144. ~ekA  = ~x
         XB    = pmult((x.1*inv((x.2*x.3))), x.4)
         XC    = pmult((x.2*x.5*inv((~x*x.1*x.6))), x.7)
         z     = em(x.4, x.7)^(x.5*inv((x.3*x.6)))
    
    145. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((x.3*x.4))), x.5)
         XC    = pmult((x.4*inv((~x*x.2))), x.6)
         z     = em(x.5, x.6)^(x.1*inv(x.3))
    
    146. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3*x.4))), x.5)
         XC    = pmult((x.4*inv(x.1)), x.6)
         z     = em(x.5, x.6)^(x.2*inv(x.3))
    
    147. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3*x.4))), x.5)
         XC    = pmult((x.4*x.6*inv(x.1)), x.7)
         z     = em(x.5, x.7)^(x.2*x.6*inv(x.3))
    
    148. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((x.3*x.4))), x.5)
         XC    = pmult((x.3*x.6*inv((~x*x.1))), x.7)
         z     = em(x.5, x.7)^(x.2*x.6*inv(x.4))
    
    149. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3*x.4))), x.5)
         XC    = pmult((x.3*inv((x.1*x.6))), x.7)
         z     = em(x.5, x.7)^(x.2*inv((x.4*x.6)))
    
    150. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((x.3*x.4))), x.5)
         XC    = pmult((x.3*inv((~x*x.1*x.6))), x.7)
         z     = em(x.5, x.7)^(x.2*inv((x.4*x.6)))
    
    151. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((~x*x.3*x.4))), x.5)
         XC    = pmult((x.3*x.6*inv((x.1*x.7))), x.8)
         z     = em(x.5, x.8)^(x.2*x.6*inv((x.4*x.7)))
    
    152. ~ekA  = ~x
         XB    = pmult((x.1*x.2*inv((x.3*x.4))), x.5)
         XC    = pmult((x.3*x.6*inv((~x*x.1*x.7))), x.8)
         z     = em(x.5, x.8)^(x.2*x.6*inv((x.4*x.7)))
    
    153. ~ekA  = ~x
         XB    = pmult(inv(~x), x.1)
         XC    = XC.2
         z     = em(x.1, XC.2)
    
    154. ~ekA  = ~x
         XB    = XB.2
         XC    = pmult(inv(~x), x.2)
         z     = em(XB.2, x.2)
    
    155. ~ekA  = ~x
         XB    = pmult(x.1, x.2)
         XC    = pmult(inv((~x*x.1)), x.3)
         z     = em(x.2, x.3)
    
    156. ~ekA  = ~x
         XB    = pmult(inv(x.1), x.2)
         XC    = pmult((x.1*inv(~x)), x.3)
         z     = em(x.2, x.3)
    
    157. ~ekA  = ~x
         XB    = pmult(inv((~x*x.1)), x.2)
         XC    = pmult(x.1, x.3)
         z     = em(x.2, x.3)
    
    158. ~ekA  = ~x
         XB    = pmult((x.1*inv(~x)), x.2)
         XC    = pmult(inv(x.1), x.3)
         z     = em(x.2, x.3)
    
    159. ~ekA  = ~x
         XB    = pmult((x.1*inv(x.2)), x.3)
         XC    = pmult((x.2*inv((~x*x.1))), x.4)
         z     = em(x.3, x.4)
    
    160. ~ekA  = ~x
         XB    = pmult((x.1*inv((~x*x.2))), x.3)
         XC    = pmult((x.2*inv(x.1)), x.4)
         z     = em(x.3, x.4)
  */

lemma session_key_establish:
  exists-trace
  "∃ A B C #ia #ib #ic k.
    ((((((((SessionKey( A, (B++C), k ) @ #ia) ∧
           (SessionKey( B, (A++C), k ) @ #ib)) ∧
          (SessionKey( C, (A++B), k ) @ #ic)) ∧
         (¬(A = B))) ∧
        (¬(B = C))) ∧
       (¬(A = C))) ∧
      (¬(∃ #j. LtkReveal( A ) @ #j))) ∧
     (¬(∃ #j. LtkReveal( B ) @ #j))) ∧
    (¬(∃ #j. LtkReveal( C ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B C #ia #ib #ic k.
  (SessionKey( A, (B++C), k ) @ #ia) ∧
  (SessionKey( B, (A++C), k ) @ #ib) ∧
  (SessionKey( C, (A++B), k ) @ #ic)
 ∧
  (¬(A = B)) ∧
  (¬(B = C)) ∧
  (¬(A = C)) ∧
  (∀ #j. (LtkReveal( A ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (LtkReveal( B ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (LtkReveal( C ) @ #j) ⇒ ⊥)"
*/
simplify
solve( SessionKey( A, (B++C), k ) @ #ia )
  case Proto2_case_1
  solve( PState( $A.1, ($B.2++$C.2), ~ekA ) ▶₀ #ia )
    case Proto1
    solve( !Pk( $B.3, pk(ltkB) ) ▶₁ #ia )
      case Register_pk
      solve( !Pk( $C.3, pk(ltkC) ) ▶₂ #ia )
        case Register_pk
        solve( SessionKey( $B.3, ($A.1++$C.3), z ) @ #ib )
          case Proto2_case_1
          solve( PState( $A.2, ($A.3++$C.5), ~ekA.1 ) ▶₀ #ib )
            case Proto1
            solve( !Pk( $A.4, pk(ltkB.1) ) ▶₁ #ib )
              case Register_pk
              solve( !Pk( $B.5, pk(ltkC.1) ) ▶₂ #ib )
                case Register_pk
                solve( SessionKey( $B.5, ($A.2++$A.4), z.1 ) @ #ic )
                  case Proto2_case_1
                  solve( PState( $A.5, ($A.6++$A.7), ~ekA.2 ) ▶₀ #ic )
                    case Proto1
                    solve( !Pk( $C.7, pk(ltkB.2) ) ▶₁ #ic )
                      case Register_pk
                      solve( !Pk( $B.7, pk(ltkC.2) ) ▶₂ #ic )
                        case Register_pk
                        solve( !KU( sign(<$C.7, ($A.5++$B.7), XB>, ~ltk.1) ) @ #vk.2 )
                          case Proto1
                          solve( !KU( sign(<$A.8, ($C.7++$B.8), XC>, ~ltk.2) ) @ #vk.5 )
                            case Proto1
                            solve( !KU( sign(<$B.9, ($A.8++$C.8), XB.1>, ~ltk.4) ) @ #vk.8 )
                              case Proto1
                              solve( !KU( sign(<$A.9, ($B.9++$C.9), pmult(x, 'P')>, ~ltk.5)
                                     ) @ #vk.11 )
                                case Proto1
                                solve( !KU( sign(<$C.10, ($A.9++$B.10), XB.2>, ~ltk.7) ) @ #vk.14 )
                                  case Proto1
                                  solve( !KU( sign(<$B.11, ($A.10++$C.10), pmult(x.2, 'P')>, ~ltk.8)
                                         ) @ #vk.17 )
                                    case Proto1
                                    solve( splitEqs(3) )
                                      case split_case_3
                                      solve( splitEqs(6) )
                                        case split_case_6
                                        solve( !KU( pmult(~ekA.16, 'P') ) @ #vk.13 )
                                          case Proto1
                                          solve( splitEqs(11) )
                                            case split
                                            solve( !KU( pmult(~ekA.15, 'P') ) @ #vk.10 )
                                              case Proto1
                                              solve( splitEqs(14) )
                                                case split
                                                solve( !KU( pmult(~ekA.17, 'P') ) @ #vk.16 )
                                                  case Proto1
                                                  solve( splitEqs(17) )
                                                    case split
                                                    SOLVED // trace found
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Session_Key_Secrecy_PFS:
  all-traces
  "∀ A B C sessKey #i #k.
    ((SessionKey( A, (B++C), sessKey ) @ #i) ∧ (K( sessKey ) @ #k)) ⇒
    (((∃ #l. (LtkReveal( A ) @ #l) ∧ (#l < #i)) ∨
      (∃ #l. (LtkReveal( B ) @ #l) ∧ (#l < #i))) ∨
     (∃ #l. (LtkReveal( C ) @ #l) ∧ (#l < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B C sessKey #i #k.
  (SessionKey( A, (B++C), sessKey ) @ #i) ∧ (K( sessKey ) @ #k)
 ∧
  (∀ #l. (LtkReveal( A ) @ #l) ⇒ ¬(#l < #i)) ∧
  (∀ #l. (LtkReveal( B ) @ #l) ⇒ ¬(#l < #i)) ∧
  (∀ #l. (LtkReveal( C ) @ #l) ⇒ ¬(#l < #i))"
*/
simplify
solve( SessionKey( A, (B++C), x ) @ #i )
  case Proto2
  solve( PState( $A.1, ($B.2++$C.2), ~ekA ) ▶₀ #i )
    case Proto1
    solve( !Pk( $C.3, pk(ltkB) ) ▶₁ #i )
      case Register_pk
      solve( !Pk( $B.3, pk(ltkC) ) ▶₂ #i )
        case Register_pk
        solve( !KU( sign(<$C.3, ($A.1++$B.3), XB>, ~ltk.1) ) @ #vk.3 )
          case Proto1
          solve( !KU( sign(<$B.4, ($A.2++$C.3), XC>, ~ltk.2) ) @ #vk.6 )
            case Proto1
            solve( !KU( em('P', 'P')^(~ekA.3*~ekA.4*~ekA.5) ) @ #vk )
              case Proto1_case_1
              by solve( !KU( ~ekA.7 ) @ #vk.9 )
            next
              case Proto1_case_2
              by solve( !KU( ~ekA.7 ) @ #vk.9 )
            next
              case Proto1_case_3
              by solve( !KU( ~ekA.7 ) @ #vk.9 )
            next
              case Proto1_case_4
              by solve( !KU( ~ekA.7 ) @ #vk.7 )
            next
              case Proto1_case_5
              by solve( !KU( ~ekA.7 ) @ #vk.7 )
            next
              case Proto1_case_6
              by solve( !KU( ~ekA.7 ) @ #vk.7 )
            next
              case Proto1_case_7
              by solve( !KU( ~ekA.8 ) @ #vk.7 )
            next
              case Proto1_case_8
              by solve( !KU( ~ekA.8 ) @ #vk.7 )
            next
              case Proto1_case_9
              by solve( !KU( ~ekA.8 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~ekA.3 ) @ #vk.9 )
            qed
          next
            case c_sign
            solve( !KU( ~ltk.2 ) @ #vk.8 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltk.1 ) @ #vk.8 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed















/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Proto2: 
Failed to derive Variable(s): ltkB, ltkC
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: d8e8266fc8aa702ff3c4d08608a7fbbe124eea65, branch: cyclic-squashed
Compiled at: 2024-11-27 09:37:37.786154 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/ake/bilinear/Joux.spthy

  output:          examples/ake/bilinear/Joux.spthy.tmp
  processing time: 7.84s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  session_key_establish (exists-trace): verified (28 steps)
  Session_Key_Secrecy_PFS (all-traces): verified (22 steps)

==============================================================================
*/
