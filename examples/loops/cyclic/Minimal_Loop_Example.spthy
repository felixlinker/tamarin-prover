theory Minimal_Loop_Example begin



/*
  Author: Simon Meier <simon.meier@inf.ethz.ch>
  Date:   2012 06 10
  Status: Working

  A minimal example that is looping and satisfies a property cannot be proven
  without inductive strengthening.

*/

rule Start[color=#FF6961]: [ Fr(x) ] --[ Start(x) ]-> [ A(x) ]

rule Loop[color=#B4D9EF]:  [ A(x) ]  --[ Loop(x)  ]-> [ A(x) ]

rule Stop:  [ A(x) ]  --[ Stop(x)  ]-> [ ]

lemma Start_before_Loop:
  "All x #j. Loop(x) @ j ==> (Ex #i. Start(x) @ i & i < j)"

lemma Start_before_Stop:
  "All x #j. Stop(x) @ j ==> (Ex #i. Start(x) @ i & i < j)"

lemma Loop_before_Stop:
  "All x #i #j. Stop(x) @ j & Loop(x) @ i ==> #i < #j"

lemma Stop_unique:
  "All x #i #j. Stop(x) @ j & Stop(x) @ i ==> #i = #j"
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( A( x.2 ) ▶₀ #j )
    case Loop
    search for cycle
    minimize for cyclic proofs
      case weaken
      solve( A( x.2 ) ▶₀ #vr )
        case Loop
        search for cycle
        by contradiction /* cyclic backlink to CS id 6-08 */
      next
        case Start
        by contradiction /* cyclic */
      qed
    qed
  next
    case Start
    by contradiction /* cyclic */
  qed
next
  case case_2
  solve( A( x.2 ) ▶₀ #i )
    case Loop
    search for cycle
    minimize for cyclic proofs
      case weaken
      solve( A( x.2 ) ▶₀ #vr )
        case Loop
        search for cycle
        by contradiction /* cyclic backlink to CS id 6-0c */
      next
        case Start
        by contradiction /* cyclic */
      qed
    qed
  next
    case Start
    by contradiction /* cyclic */
  qed
qed

lemma Satisfied_by_empty_trace_only:
  exists-trace
  "All x #j. Loop(x) @ j ==> F"

end
