theory Minimal_KeyRenegotiation begin

/*
   Protocol:    A minimal version of a key renegotiation protocol.
   Modeler:     Simon Meier
   Date:        May 2012

   Status:      working

   Minimal example of the verification of a protocol with repeated key
   re-negotiation.

*/

builtins: symmetric-encryption

rule Setup:
    [ Fr(~k) ]
  -->
    [ Sender(~k), Receiver(~k) ]

rule Send:
    [ Sender(k0), Fr(~k) ]
  --[ Secret(~k) ]->
    [ Sender(~k), Out( senc{~k}k0 ) ]


rule Receive:
    [ Receiver(k0), In(senc{k}k0) ]
  --[ Secret(k) ]->
    [ Receiver(k) ]

lemma Secret_reachable:
  exists-trace
  "Ex k #i. Secret(k) @ i"

// TODO: Investigate the form of the property and its proof when key
// compromise is allowed.
lemma secrecy[use_induction]:
  "All k #i #j. Secret(k) @ i & KU(k) @ j ==> F"
simplify
solve( Secret( k ) @ #i )
  case Receive
  solve( Receiver( k0 ) ▶₀ #i )
    case Receive
    solve( !KU( senc(k.1, k0) ) @ #vk )
      case Send
      solve( !KU( ~k.2 ) @ #j )
        case Send
        search for cycle
        by contradiction /* cyclic backlink to CS id 3-04 */
      qed
    next
      case c_senc
      solve( Receiver( k0.1 ) ▶₀ #vr )
        case Receive
        solve( !KU( senc(k0, k0.1) ) @ #vk.1 )
          case Send
          solve( !KU( ~k.2 ) @ #vk.3 )
            case Send
            search for cycle
            by contradiction /* cyclic backlink to CS id 3-04 */
          qed
        next
          case c_senc
          search for cycle
          by contradiction /* cyclic backlink to CS id 3-04 */
        qed
      next
        case Setup
        solve( !KU( senc(k0, ~k.2) ) @ #vk.1 )
          case Send
          solve( !KU( ~k.3 ) @ #vk.3 )
            case Send
            by solve( !KU( ~k.2 ) @ #vk.4 )
          qed
        next
          case c_senc
          by solve( !KU( ~k.2 ) @ #vk.5 )
        qed
      qed
    qed
  next
    case Setup
    solve( !KU( senc(k.1, ~k.2) ) @ #vk )
      case Send
      solve( !KU( ~k.3 ) @ #j )
        case Send
        by solve( !KU( ~k.2 ) @ #vk.1 )
      qed
    next
      case c_senc
      by solve( !KU( ~k.2 ) @ #vk.2 )
    qed
  qed
next
  case Send
  solve( Sender( k0 ) ▶₀ #i )
    case Send
    solve( !KU( ~k.1 ) @ #j )
      case Send
      solve( !KU( ~k.2 ) @ #vk )
        case Send
        solve( Sender( x.1 ) ▶₀ #vr.3 )
          case Send
          search for cycle
          by contradiction /* cyclic backlink to CS id 3-00 */
        next
          case Setup
          by solve( !KU( ~k.3 ) @ #vk.1 )
        qed
      qed
    qed
  next
    case Setup
    solve( !KU( ~k.1 ) @ #j )
      case Send
      by solve( !KU( ~k.2 ) @ #vk )
    qed
  qed
qed

end
