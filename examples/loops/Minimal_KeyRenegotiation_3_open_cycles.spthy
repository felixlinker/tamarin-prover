theory Minimal_KeyRenegotiation begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2





/* looping facts with injective instances: Sender/1 */



rule (modulo E) Setup:
   [ Fr( ~k ) ] --> [ Sender( ~k ), Receiver( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Send:
   [ Sender( k0 ), Fr( ~k ) ]
  --[ Secret( ~k ) ]->
   [ Sender( ~k ), Out( senc(~k, k0) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Receive:
   [ Receiver( k0 ), In( senc(k, k0) ) ]
  --[ Secret( k ) ]->
   [ Receiver( k ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma Secret_reachable [use_induction]:
  exists-trace "∃ k #i. Secret( k ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ k #i. (Secret( k ) @ #i)"
*/
by sorry

lemma secrecy [use_induction]:
  all-traces
  "∀ k #i #j. ((Secret( k ) @ #i) ∧ (!KU( k ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ k #i #j. (Secret( k ) @ #i) ∧ (!KU( k ) @ #j)"
*/
simplify
solve( solve( Secret( k ) @ #i ) )
  case Receive
  solve( solve( Receiver( k0 ) ▶₀ #i ) )
    case Receive
    solve( solve( !KU( senc(k.1, k0) ) @ #vk ) )
      case Send
      solve( solve( !KU( ~k.2 ) @ #j ) )
        case Send
        by sorry
      qed
    next
      case c_senc
      by sorry
    qed
  next
    case Setup
    solve( solve( !KU( senc(k.1, ~k.2) ) @ #vk ) )
      case Send
      solve( solve( !KU( ~k.3 ) @ #j ) )
        case Send
        by solve( solve( !KU( ~k.2 ) @ #vk.1 ) )
      qed
    next
      case c_senc
      by solve( solve( !KU( ~k.2 ) @ #vk.2 ) )
    qed
  qed
next
  case Send
  solve( solve( !KU( ~k.1 ) @ #j ) )
    case Send
    solve( solve( Sender( x ) ▶₀ #vr ) )
      case Send
      solve( solve( !KU( ~k.2 ) @ #vk ) )
        case Send
        by sorry
      qed
    next
      case Setup
      by solve( solve( !KU( ~k.2 ) @ #vk ) )
    qed
  qed
qed











/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Setup: 
Failed to derive Variable(s): ~k

Rule Send: 
Failed to derive Variable(s): ~k, k0

Rule Receive: 
Failed to derive Variable(s): k, k0
*/

/*
Generated from:
Tamarin version 1.9.0
Maude version 3.3.1
Git revision: 4e738803099a4a29e0e4754065700534d762e219 (with uncommited changes), branch: cyclic
Compiled at: 2024-03-04 16:21:58.525728 UTC
*/

end