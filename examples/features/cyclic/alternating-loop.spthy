theory AlternatingLoop
begin

functions: kdf/2, h/1

rule Start:
  let seed = kdf('0', ~x) in
  [ Fr(~id), Fr(~x) ]
  --[ FreshSeed(~id, seed, ~x)
    , Outer(~id, seed) ]->
  [ Construct(~id, 'x', seed, seed)
  , !Seed(~id, ~x) ]

rule OuterNewSecret:
  let newSeed = kdf(seed, ~x) in
  [ Construct(~id, '0', k, seed), Fr(~x) ]
  --[ FreshSeed(~id, newSeed, ~x)
    , Outer(~id, newSeed) ]->
  [ Construct(~id, 'x', newSeed, newSeed)
  , !Seed(~id, ~x) ]

rule OuterOldSecret:
  let newSeed = kdf(seed, '0') in
  [ Construct(~id, 'x', k, seed) ]
  --[ Outer(~id, seed) ]->
  [ Construct(~id, '0', newSeed, seed) ]

rule Inner:
  let k = h(k_old) in
  [ Construct(~id, t, k_old, seed) ]
  --[ Key(~id, k, seed) ]->
  [ Construct(~id, t, k, seed) ]

rule RevealSeed:
  [ !Seed(~id, x) ]
  --[ RevealSeed(~id, x) ]->
  [ Out(x) ]

lemma OuterLoopStep:
  "All id k seed #t. Key(id, k, seed) @ #t
    ==> Ex #x. Outer(id, seed) @ #x & #x < #t"

lemma FreshSeedInstantiate:
  "All id seed #t. Outer(id, seed) @ #t
    ==> Ex s #x. FreshSeed(id, seed, s) @ #x"

lemma SeedSecrecy:
  "All id k seed #t1 #t2. Key(id, k, seed) @ #t1 & KU(k) @ #t2
    ==> (Ex #x. KU(seed) @ #x)"

lemma KeySecrecy[heuristic=i]:
  "All id k seed #t. Key(id, k, seed) @ #t
    ==>   (not Ex #x. K(k) @ #x)
        | (Ex x #x1 #x2. FreshSeed(id, seed, x) @ #x1
            & RevealSeed(id, x) @ #x2
            & #x1 < #x2)"

end
