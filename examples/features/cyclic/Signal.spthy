theory Signal
begin

heuristic: O "signal.py"

builtins: diffie-hellman, symmetric-encryption
functions: kdf/1, decrypts/2, true/0
equations: decrypts(senc(m, k), k) = true

restriction Eq:
  "All a b #x. Eq(a, b) @ #x ==> a = b"

restriction Neq:
  "All a b #x. Neq(a, b) @ #x ==> not (a = b)"

rule KeyGen:
  [ Fr(~ltk), Fr(~prek) ]
  -->
  [ !SecretKeys($A, ~ltk, ~prek)
  , !PublicKeys($A, 'g'^~ltk, 'g'^~prek)
  , Out('g'^~ltk)
  , Out('g'^~prek) ]

rule SenderStart:
  let dh1 = prepk^~ltk
      dh2 = ltpk^~x
      dh3 = prepk^~x
      ss = kdf(<dh1, dh2, dh3>)
      rk = kdf(<'rk', ss>)
      ck = kdf(<'ck', rk>)
      mk = kdf(<'mk', ck>)
  in
  [ Fr(~id), Fr(~x), Fr(~m)
  , !SecretKeys($A, ~ltk, prek)
  , !PublicKeys($B, ltpk, prepk) ]
  --[ Neq($A, $B)
    , Send(~m)
    , GenEph('g'^~x) ]->
  [ Session(~id, $A, 'S', ~x, $B, prepk, rk, ck)
  , Out(<'g'^~x, senc(~m, mk)>) ]

rule Send:
  let new_ck = kdf(<'ck', ck>)
      mk = kdf(<'mk', new_ck>)
  in
  [ Fr(~m)
  , Session(~id, $A, 'S', ~x, $B, pc, rk, ck) ]
  --[ Send(~m) ]->
  [ Session(~id, $A, 'S', ~x, $B, pc, rk, new_ck)
  , Out(senc(~m, mk)) ]

rule ReceiverStart:
  let dh1 = ltpk^~prek
      dh2 = pc^~ltk
      dh3 = pc^~prek
      ss = kdf(<dh1, dh2, dh3>)
      rk = kdf(<'rk', ss>)
      ck = kdf(<'ck', rk>)
      mk = kdf(<'mk', ck>)
  in
  [ Fr(~id)
  , !SecretKeys($A, ~ltk, ~prek)
  , !PublicKeys($B, ltpk, prepk)
  , In(<pc, enc>) ]
  --[ Neq($A, $B)
    , Receive(sdec(enc, mk))
    , Eq(decrypts(enc, mk), true) ]->
  [ Session(~id, $A, 'R', ~prek, $B, pc, rk, ck) ]

rule Receive:
  let new_ck = kdf(<'ck', ck>)
      mk = kdf(<'mk', new_ck>)
  in
  [ In(enc)
  , Session(~id, $A, 'R', ~x, $B, pc, rk, ck) ]
  --[ Receive(sdec(enc, mk))
    , Eq(decrypts(enc, mk), true) ]->
  [ Session(~id, $A, 'R', ~x, $B, pc, rk, new_ck) ]

rule OuterRatchetToSender:
  let dhss = pc^~x
      rk = kdf(<'rk', old_rk, dhss>)
      ck = kdf(<'ck', rk>)
      mk = kdf(<'mk', ck>)
  in
  [ Fr(~x), Fr(~m)
  , Session(~id, $A, 'R', drop, $B, pc, old_rk, old_ck) ]
  --[ Send(~m) ]->
  [ Session(~id, $A, 'S', ~x, $B, pc, rk, ck)
  , Out(<'g'^~x, senc(~m, mk)>) ]

rule OuterRatchetToReceiver:
  let dhss = pc^~x
      rk = kdf(<'rk', old_rk, dhss>)
      ck = kdf(<'ck', rk>)
      mk = kdf(<'mk', ck>)
  in
  [ In(<pc, enc>)
  , Session(~id, $A, 'S', ~x, $B, old_pc, old_rk, old_ck) ]
  --[ Receive(sdec(enc, mk))
    , Eq(decrypts(enc, mk), true) ]->
  [ Session(~id, $A, 'R', ~x, $B, pc, rk, ck) ]

lemma Exec:
  exists-trace
  "Ex m #x #y. Receive(m) @ #x & Send(m) @ #y"

lemma Secrecy:
  "All m #t. Send(m) @ #t ==> (not Ex #x. K(m) @ #x)"

end
