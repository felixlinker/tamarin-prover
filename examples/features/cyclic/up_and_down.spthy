theory UpAndDown
begin

functions: h/1

rule Start:
  [ Fr(~x) ]
  --[ Gen(~x, ~x)
    , Start(~x) ]->
  [ Up(~x, ~x) ]

rule Up:
  [ Up(id, x) ]
  --[ Gen(id, h(x)) ]->
  [ Up(id, h(x)) ]

rule DownStart:
  [ Up(idUp, x), Fr(~idDown) ]
  --[ Destr(~idDown, x) ]->
  [ Down(~idDown, x) ]

rule Down:
  [ Down(id, h(x)) ]
  --[ Destr(id, x) ]->
  [ Down(id, x) ]

rule DownEnd:
  [ Down(id, x) ]
  --[ End(id, x) ]->
  []

lemma CorrectnessInvariant:
  "All idd x #a. Destr(idd, x) @ #a ==> Ex idg #b. Gen(idg, x) @ #b"

lemma CorrectnessEnd:
  "All idd x #a. End(idd, x) @ #a ==> Ex idg #b. Gen(idg, x) @ #b"

lemma GenStart:
  "All id x #a. Gen(id, x) @ #a ==> Ex seed #b. Start(seed) @ #b & (seed << x | seed = x)"

lemma DestrSeed:
  "All id x #a. Destr(id, x) @ #a ==> Ex seed #b. Start(seed) @ #b & (seed << x | seed = x)"

lemma GenUnique:
  "All id1 id2 x #a #b. Gen(id1, x) @ #a & Gen(id2, x) @ #b ==> #a = #b"

// Not provable using cyclic induction
lemma Correspondence:
  "All id1 id2 x #a #b. Destr(id1, x) @ #a & Destr(id2, x) @ #b ==> #a = #b"

end
